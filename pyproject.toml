[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "voice-ai-agent"
version = "0.1.0"
description = "Production-ready Voice AI Agent for natural telephone conversations"
authors = [
    {name = "Voice AI Team", email = "team@voiceai.com"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.11"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

dependencies = [
    # Core framework
    "fastapi>=0.111.0",
    "uvicorn[standard]>=0.29.0",
    "pydantic>=2.8.0",
    "pydantic-settings>=2.3.0",
    
    # AI Services
    "openai>=1.35.0",
    "deepgram-sdk>=3.4.0",
    "cartesia>=1.0.4",
    
    # LiveKit integration
    "livekit>=0.15.0",
    "livekit-api>=0.5.0",
    
    # Audio processing
    "pyaudio>=0.2.11",
    "numpy>=1.24.0",
    "scipy>=1.11.0",
    
    # Database and storage
    "sqlalchemy>=2.0.31",
    "alembic>=1.13.0",
    "aiosqlite>=0.19.0",
    
    # HTTP and networking
    "httpx>=0.27.0",
    "websockets>=12.0",
    "aiofiles>=23.2.0",
    
    # Monitoring and logging
    "structlog>=24.2.0",
    "prometheus-client>=0.20.0",
    "sentry-sdk>=2.5.0",
    
    # Utilities
    "python-dotenv>=1.0.0",
    "click>=8.1.0",
    "rich>=13.7.0",
    "tenacity>=8.4.0",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=8.3.0",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "pytest-xdist>=3.5.0",
    "pytest-timeout>=2.3.0",
    "httpx>=0.27.0",  # for testing
    
    # Code quality
    "black>=24.4.0",
    "ruff>=0.5.0",
    "mypy>=1.11.0",
    "pre-commit>=3.6.0",
    
    # Type stubs
    "types-requests>=2.31.0",
    "types-python-dateutil>=2.8.0",
    
    # Development tools
    "ipython>=8.17.0",
    "jupyter>=1.0.0",
]

[project.scripts]
voice-ai-agent = "src.main:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["src*", "config*"]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# Ruff configuration
[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["B011"]

# MyPy configuration
[tool.mypy]
python_version = "3.11"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "deepgram.*",
    "cartesia.*",
    "livekit.*",
    "pyaudio.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "timeout: marks tests with timeout requirements",
    "timeout: marks tests with timeout requirements",
]
asyncio_mode = "auto"

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]