#!/usr/bin/env python3
"""
–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã LiveKit.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π.
"""

import os
import sys
import time
import asyncio
import json
from pathlib import Path

def load_env_file():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞."""
    env_file = Path(__file__).parent.parent / ".env"
    if env_file.exists():
        with open(env_file, 'r') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#') and '=' in line:
                    key, value = line.split('=', 1)
                    os.environ[key] = value
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ {env_file}")
    else:
        print(f"‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω: {env_file}")

async def test_jwt_creation():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è JWT —Ç–æ–∫–µ–Ω–∞ –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –æ—Ç Settings."""
    print("üîê –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è JWT —Ç–æ–∫–µ–Ω–∞...")
    
    try:
        # –ü—Ä—è–º–æ–π –∏–º–ø–æ—Ä—Ç –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
        from livekit.api import AccessToken, VideoGrants
        from datetime import timedelta
        
        api_key = os.getenv('LIVEKIT_API_KEY')
        api_secret = os.getenv('LIVEKIT_API_SECRET')
        
        if not api_key or not api_secret:
            print("   ‚ùå API –∫–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            return False
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –Ω–∞–ø—Ä—è–º—É—é
        token = AccessToken(api_key=api_key, api_secret=api_secret)
        token.with_identity("test-participant")
        token.with_name("Test Participant")
        
        grants = VideoGrants(
            room_join=True,
            room="test-room",
            can_publish=True,
            can_subscribe=True,
            can_publish_data=True
        )
        token.with_grants(grants)
        token.with_ttl(timedelta(minutes=10))
        
        jwt_token = token.to_jwt()
        
        if jwt_token and len(jwt_token) > 50:
            print("   ‚úÖ JWT —Ç–æ–∫–µ–Ω —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–æ–∫–µ–Ω–∞
            import jwt as jwt_lib
            payload = jwt_lib.decode(jwt_token, options={"verify_signature": False})
            
            required_fields = ['iss', 'sub', 'iat', 'exp', 'video']
            missing_fields = [field for field in required_fields if field not in payload]
            
            if missing_fields:
                print(f"   ‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è –≤ JWT: {missing_fields}")
                return False
            else:
                print("   ‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ JWT —Ç–æ–∫–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
                print(f"   üìã –ü–æ–ª—è —Ç–æ–∫–µ–Ω–∞: {list(payload.keys())}")
                return True
        else:
            print("   ‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JWT —Ç–æ–∫–µ–Ω")
            return False
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è JWT —Ç–æ–∫–µ–Ω–∞: {e}")
        return False

async def test_livekit_api_connection():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ LiveKit API."""
    print("üåê –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ LiveKit API...")
    
    try:
        from livekit import api
        
        livekit_url = os.getenv('LIVEKIT_URL')
        api_key = os.getenv('LIVEKIT_API_KEY')
        api_secret = os.getenv('LIVEKIT_API_SECRET')
        
        if not all([livekit_url, api_key, api_secret]):
            print("   ‚ùå –ù–µ –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            return False
        
        # –°–æ–∑–¥–∞–Ω–∏–µ API –∫–ª–∏–µ–Ω—Ç–∞
        livekit_api = api.LiveKitAPI(
            url=livekit_url,
            api_key=api_key,
            api_secret=api_secret
        )
        
        print(f"   ‚úÖ API –∫–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è URL: {livekit_url}")
        
        # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç (–±–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è)
        try:
            from livekit.api import ListRoomsRequest
            request = ListRoomsRequest()
            
            # –≠—Ç–æ –º–æ–∂–µ—Ç –Ω–µ —Å—Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è, –Ω–æ –ø—Ä–æ–≤–µ—Ä–∏–º —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
            if request is not None:
                print("   ‚úÖ –ó–∞–ø—Ä–æ—Å –∫ API —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                return True
            else:
                print("   ‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ API")
                return False
                
        except Exception as e:
            print(f"   ‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∫ API: {e}")
            print("   ‚úÖ –ù–æ API –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return True
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ LiveKit API: {e}")
        return False

async def test_sip_configuration():
    """–¢–µ—Å—Ç SIP –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
    print("üìû –¢–µ—Å—Ç SIP –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    
    try:
        sip_config_file = Path(__file__).parent.parent / "livekit-sip-correct.yaml"
        
        if not sip_config_file.exists():
            print("   ‚ùå SIP –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
        file_size = sip_config_file.stat().st_size
        if file_size < 100:
            print(f"   ‚ùå SIP –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –º–∞–ª: {file_size} –±–∞–π—Ç")
            return False
        
        print(f"   ‚úÖ SIP –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω: {file_size} –±–∞–π—Ç")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ SIP –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        sip_vars = ['SIP_NUMBER', 'SIP_SERVER', 'SIP_USERNAME', 'SIP_PASSWORD']
        configured_vars = [var for var in sip_vars if os.getenv(var)]
        
        print(f"   üìã –ù–∞—Å—Ç—Ä–æ–µ–Ω–æ SIP –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö: {len(configured_vars)}/{len(sip_vars)}")
        
        if len(configured_vars) >= 3:  # –ú–∏–Ω–∏–º—É–º 3 –∏–∑ 4 –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
            print("   ‚úÖ SIP –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ")
            return True
        else:
            print("   ‚ö†Ô∏è  –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ SIP –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ")
            return False
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ SIP –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False

async def test_security_configuration():
    """–¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏."""
    print("üîí –¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è HTTPS/WSS
        livekit_url = os.getenv('LIVEKIT_URL', '')
        
        if livekit_url.startswith(('https://', 'wss://')):
            print("   ‚úÖ LiveKit URL –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª")
            secure_url = True
        else:
            print("   ‚ö†Ô∏è  LiveKit URL –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª")
            secure_url = False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã API –∫–ª—é—á–µ–π
        api_key = os.getenv('LIVEKIT_API_KEY', '')
        api_secret = os.getenv('LIVEKIT_API_SECRET', '')
        
        if len(api_key) >= 10 and len(api_secret) >= 20:
            print("   ‚úÖ API –∫–ª—é—á–∏ –∏–º–µ—é—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—É—é –¥–ª–∏–Ω—É")
            secure_keys = True
        else:
            print("   ‚ö†Ô∏è  API –∫–ª—é—á–∏ –º–æ–≥—É—Ç –±—ã—Ç—å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–º–∏")
            secure_keys = False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
        secret_key = os.getenv('SECRET_KEY', '')
        if len(secret_key) >= 20:
            print("   ‚úÖ –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            secure_secret = True
        else:
            print("   ‚ö†Ô∏è  –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π")
            secure_secret = False
        
        # –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        security_score = sum([secure_url, secure_keys, secure_secret])
        
        if security_score >= 2:
            print(f"   ‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—Ä–∏–µ–º–ª–µ–º–∞ ({security_score}/3)")
            return True
        else:
            print(f"   ‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ ({security_score}/3)")
            return False
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {e}")
        return False

async def test_performance_configuration():
    """–¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."""
    print("‚ö° –¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        performance_config = Path(__file__).parent.parent / "config" / "performance.yaml"
        
        if performance_config.exists():
            print("   ‚úÖ –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞–π–¥–µ–Ω")
            perf_config_exists = True
        else:
            print("   ‚ö†Ô∏è  –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            perf_config_exists = False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ª–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
        max_latency = os.getenv('MAX_RESPONSE_LATENCY', '0')
        try:
            latency_value = float(max_latency)
            if 0 < latency_value <= 3.0:  # –†–∞–∑—É–º–Ω—ã–µ –ø—Ä–µ–¥–µ–ª—ã –ª–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
                print(f"   ‚úÖ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ª–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞: {latency_value}—Å")
                latency_ok = True
            else:
                print(f"   ‚ö†Ô∏è  –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ª–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –≤–Ω–µ —Ä–∞–∑—É–º–Ω—ã—Ö –ø—Ä–µ–¥–µ–ª–æ–≤: {latency_value}—Å")
                latency_ok = False
        except ValueError:
            print("   ‚ö†Ô∏è  –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ª–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
            latency_ok = False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ retry
        retry_attempts = os.getenv('RETRY_ATTEMPTS', '0')
        try:
            retry_value = int(retry_attempts)
            if 1 <= retry_value <= 10:  # –†–∞–∑—É–º–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
                print(f"   ‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ: {retry_value}")
                retry_ok = True
            else:
                print(f"   ‚ö†Ô∏è  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –≤–Ω–µ —Ä–∞–∑—É–º–Ω—ã—Ö –ø—Ä–µ–¥–µ–ª–æ–≤: {retry_value}")
                retry_ok = False
        except ValueError:
            print("   ‚ö†Ô∏è  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ")
            retry_ok = False
        
        # –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        perf_score = sum([perf_config_exists, latency_ok, retry_ok])
        
        if perf_score >= 2:
            print(f"   ‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–∏–µ–º–ª–µ–º–∞ ({perf_score}/3)")
            return True
        else:
            print(f"   ‚ö†Ô∏è  –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ç—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è ({perf_score}/3)")
            return False
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
        return False

async def run_minimal_validation():
    """–ó–∞–ø—É—Å–∫ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏."""
    print("üöÄ –ó–∞–ø—É—Å–∫ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã LiveKit")
    print("=" * 70)
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    load_env_file()
    
    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–æ–∫
    checks = [
        ("–°–æ–∑–¥–∞–Ω–∏–µ JWT —Ç–æ–∫–µ–Ω–∞", test_jwt_creation()),
        ("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ LiveKit API", test_livekit_api_connection()),
        ("SIP –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", test_sip_configuration()),
        ("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏", test_security_configuration()),
        ("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", test_performance_configuration())
    ]
    
    results = []
    for check_name, check_coro in checks:
        print(f"\n--- {check_name} ---")
        try:
            result = await check_coro
            results.append((check_name, result))
        except Exception as e:
            print(f"   ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            results.append((check_name, False))
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 70)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –ú–ò–ù–ò–ú–ê–õ–¨–ù–û–ô –í–ê–õ–ò–î–ê–¶–ò–ò")
    print("=" * 70)
    
    passed_checks = sum(1 for _, result in results if result)
    total_checks = len(results)
    success_rate = (passed_checks / total_checks) * 100
    
    print(f"–ü—Ä–æ–π–¥–µ–Ω–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: {passed_checks}/{total_checks} ({success_rate:.1f}%)")
    
    for check_name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù–û" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù–û"
        print(f"   {status}: {check_name}")
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    print("\nüìã –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    
    failed_checks = [name for name, result in results if not result]
    
    if not failed_checks:
        print("   üéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.")
    else:
        print("   üîß –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –ø—Ä–æ–±–ª–µ–º—ã:")
        for i, check_name in enumerate(failed_checks, 1):
            print(f"      {i}. {check_name}")
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
    report = {
        "validation_summary": {
            "timestamp": time.strftime("%Y-%m-%d %H:%M:%S"),
            "total_checks": total_checks,
            "passed_checks": passed_checks,
            "success_rate": success_rate,
            "status": "PASSED" if passed_checks == total_checks else "PARTIAL" if passed_checks >= total_checks * 0.6 else "FAILED"
        },
        "check_results": [
            {"check_name": name, "result": result}
            for name, result in results
        ],
        "failed_checks": failed_checks
    }
    
    report_file = f"minimal_validation_report_{int(time.time())}.json"
    with open(report_file, 'w', encoding='utf-8') as f:
        json.dump(report, f, indent=2, ensure_ascii=False)
    
    print(f"\nüìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {report_file}")
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–¥–∞ –≤—ã—Ö–æ–¥–∞
    if passed_checks == total_checks:
        print("\nüéâ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        return 0
    elif passed_checks >= total_checks * 0.6:  # 60% –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø—Ä–æ–π–¥–µ–Ω–æ
        print("\n‚ö†Ô∏è  –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø—Ä–æ–π–¥–µ–Ω–æ, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã.")
        return 2
    else:
        print("\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–∏—Å—Ç–µ–º–æ–π!")
        return 1

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    try:
        exit_code = await run_minimal_validation()
        sys.exit(exit_code)
    except Exception as e:
        print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
        sys.exit(1)

if __name__ == "__main__":
    asyncio.run(main())