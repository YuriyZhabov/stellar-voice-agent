#!/usr/bin/env python3
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º —Å SIP –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π.
"""

import asyncio
import json
import logging
import socket
import sys
import time
from pathlib import Path

# Add project root to path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))


class SIPDiagnostic:
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ SIP –ø—Ä–æ–±–ª–µ–º."""
    
    def __init__(self):
        self.logger = self._setup_logging()
        self.sip_config = self._load_sip_config()
    
    def _setup_logging(self):
        logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
        return logging.getLogger(__name__)
    
    def _load_sip_config(self):
        try:
            from src.config import get_settings
            settings = get_settings()
            
            return {
                "sip_number": settings.sip_number,
                "sip_server": settings.sip_server,
                "sip_username": settings.sip_username,
                "sip_password": settings.sip_password,
                "public_ip": settings.public_ip,
                "domain": settings.domain,
                "livekit_url": settings.livekit_url,
                "livekit_sip_uri": settings.livekit_sip_uri
            }
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return {}
    
    def check_sip_configuration(self):
        self.logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ SIP –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
        
        required_fields = ["sip_number", "sip_server", "sip_username", "sip_password", "public_ip"]
        missing_fields = []
        
        for field in required_fields:
            value = self.sip_config.get(field)
            if not value:
                missing_fields.append(field)
            else:
                self.logger.info(f"‚úÖ {field}: {value}")
        
        if missing_fields:
            self.logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è: {missing_fields}")
            return False
        
        return True
    
    def check_network_connectivity(self):
        self.logger.info("üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–µ–≤–æ–π —Å–≤—è–∑–Ω–æ—Å—Ç–∏...")
        
        sip_server = self.sip_config.get("sip_server")
        if not sip_server:
            self.logger.error("‚ùå SIP —Å–µ—Ä–≤–µ—Ä –Ω–µ —É–∫–∞–∑–∞–Ω")
            return False
        
        try:
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(10)
            result = sock.connect_ex((sip_server, 5060))
            sock.close()
            
            if result == 0:
                self.logger.info(f"‚úÖ TCP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {sip_server}:5060 —É—Å–ø–µ—à–Ω–æ")
                return True
            else:
                self.logger.error(f"‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ {sip_server}:5060")
                return False
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–≤—è–∑–Ω–æ—Å—Ç–∏: {e}")
            return False
    
    def check_docker_logs(self):
        self.logger.info("üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ Docker...")
        
        try:
            import subprocess
            
            result = subprocess.run(
                ["docker", "logs", "--tail", "50", "voice-ai-agent-prod"],
                capture_output=True, text=True, timeout=10
            )
            
            if result.returncode != 0:
                self.logger.error("‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏")
                return False
            
            logs = result.stdout + result.stderr
            
            # –ü–æ–∏—Å–∫ SIP –æ—à–∏–±–æ–∫
            sip_errors = []
            for line in logs.split('\n'):
                if 'sip' in line.lower() and ('error' in line.lower() or 'failed' in line.lower()):
                    sip_errors.append(line.strip())
            
            if sip_errors:
                self.logger.error(f"‚ùå –ù–∞–π–¥–µ–Ω–æ {len(sip_errors)} SIP –æ—à–∏–±–æ–∫:")
                for error in sip_errors[-3:]:
                    self.logger.error(f"   {error}")
                return False
            else:
                self.logger.info("‚úÖ SIP –æ—à–∏–±–æ–∫ –≤ –ª–æ–≥–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return True
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ª–æ–≥–æ–≤: {e}")
            return False
    
    def generate_fix_recommendations(self):
        print("\n" + "=" * 80)
        print("üîß –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Æ")
        print("=" * 80)
        print()
        print("1. üìû –ü–†–û–í–ï–†–¨–¢–ï –°–¢–ê–¢–£–° –ù–û–ú–ï–†–ê –í NOVOFON:")
        print("   - –í–æ–π–¥–∏—Ç–µ –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Novofon")
        print("   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ –Ω–æ–º–µ—Ä +79952227978 –∞–∫—Ç–∏–≤–µ–Ω")
        print("   - –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –Ω–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫")
        print()
        print("2. üåê –ü–†–û–í–ï–†–¨–¢–ï WEBHOOK URL:")
        print(f"   - URL –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–µ–Ω: http://{self.sip_config.get('domain', 'agentio.ru')}:8000/webhooks/livekit")
        print("   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ –ø–æ—Ä—Ç 8000 –æ—Ç–∫—Ä—ã—Ç –∏–∑–≤–Ω–µ")
        print("   - –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –¥–æ–º–µ–Ω —Ä–µ–∑–æ–ª–≤–∏—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
        print()
        print("3. üîß –ü–†–û–í–ï–†–¨–¢–ï LIVEKIT SIP –ù–ê–°–¢–†–û–ô–ö–ò:")
        print("   - –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ LiveKit SIP –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        print("   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ SIP URI –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π")
        print("   - –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –µ—Å—Ç—å –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –≤—Ö–æ–¥—è—â–∏—Ö –∑–≤–æ–Ω–∫–æ–≤")
        print()
        print("4. üìã –ü–†–û–í–ï–†–¨–¢–ï –õ–û–ì–ò –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø:")
        print("   docker logs -f voice-ai-agent-prod")
        print()
        print("5. üÜò –°–í–Ø–ñ–ò–¢–ï–°–¨ –° –ü–û–î–î–ï–†–ñ–ö–û–ô:")
        print("   - Novofon: –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ SIP")
        print("   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ –∑–≤–æ–Ω–∫–æ–≤")
        print()
        print("=" * 80)
    
    async def run_diagnostic(self):
        print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê SIP –ü–†–û–ë–õ–ï–ú")
        print("=" * 50)
        
        results = {}
        results["config"] = self.check_sip_configuration()
        results["network"] = self.check_network_connectivity()
        results["logs"] = self.check_docker_logs()
        
        print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        for check, passed in results.items():
            status = "‚úÖ" if passed else "‚ùå"
            print(f"   {status} {check}: {'OK' if passed else '–û–®–ò–ë–ö–ê'}")
        
        self.generate_fix_recommendations()
        
        return all(results.values())


async def main():
    diagnostic = SIPDiagnostic()
    success = await diagnostic.run_diagnostic()
    sys.exit(0 if success else 1)


if __name__ == "__main__":
    asyncio.run(main())