#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–π–ª–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏ –≤ –ø—Ä–æ–µ–∫—Ç–µ LiveKit.
–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ñ–∞–π–ª—ã –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–æ–∫.
"""

import json
import sys
from pathlib import Path

def main():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ñ–∞–π–ª—ã —Å –æ—à–∏–±–∫–∞–º–∏ –∏–∑ –æ—Ç—á–µ—Ç–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏."""
    
    # –ß–∏—Ç–∞–µ–º –æ—Ç—á–µ—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
    try:
        with open('project_analysis.json', 'r', encoding='utf-8') as f:
            report = json.load(f)
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª project_analysis.json –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ project_file_classifier.py")
        sys.exit(1)
    
    # –ù–∞—Ö–æ–¥–∏–º —Ñ–∞–π–ª—ã —Å –æ—à–∏–±–∫–∞–º–∏
    error_files = [f for f in report['files'] if f['status'] == 'error']
    
    print("üîç –ê–ù–ê–õ–ò–ó –§–ê–ô–õ–û–í –° –û–®–ò–ë–ö–ê–ú–ò")
    print("=" * 60)
    print(f"–ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏: {len(error_files)}")
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    by_category = {}
    for file in error_files:
        category = file['category']
        if category not in by_category:
            by_category[category] = []
        by_category[category].append(file)
    
    print("\nüìä –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú:")
    for category, files in by_category.items():
        print(f"  {category}: {len(files)} —Ñ–∞–π–ª–æ–≤")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    for category, files in by_category.items():
        print(f"\nüîß {category.upper()} - –§–ê–ô–õ–´ –° –û–®–ò–ë–ö–ê–ú–ò:")
        print("-" * 40)
        
        for file in files[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 —Ñ–∞–π–ª–æ–≤
            print(f"\nüìÅ {file['path']}")
            print(f"   –†–∞–∑–º–µ—Ä: {file['size']} –±–∞–π—Ç")
            print(f"   –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {file['subcategory']}")
            
            if file['issues']:
                print("   ‚ùå –ü—Ä–æ–±–ª–µ–º—ã:")
                for issue in file['issues'][:3]:  # –ü–µ—Ä–≤—ã–µ 3 –ø—Ä–æ–±–ª–µ–º—ã
                    print(f"      ‚Ä¢ {issue}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
            preview = file['content_preview'][:100]
            if preview:
                print(f"   üìÑ –ü—Ä–µ–≤—å—é: {preview}...")
        
        if len(files) > 10:
            print(f"\n   ... –∏ –µ—â—ë {len(files) - 10} —Ñ–∞–π–ª–æ–≤")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é
    print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Æ:")
    print("-" * 40)
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø—ã –æ—à–∏–±–æ–∫
    syntax_errors = [f for f in error_files if not f['syntax_valid']]
    
    if syntax_errors:
        print(f"1. –ò—Å–ø—Ä–∞–≤–∏—Ç—å —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –≤ {len(syntax_errors)} —Ñ–∞–π–ª–∞—Ö")
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –ø–æ —Ç–∏–ø–∞–º
        python_syntax_errors = [f for f in syntax_errors if f['extension'] == '.py']
        yaml_syntax_errors = [f for f in syntax_errors if f['extension'] in ['.yaml', '.yml']]
        json_syntax_errors = [f for f in syntax_errors if f['extension'] == '.json']
        
        if python_syntax_errors:
            print(f"   ‚Ä¢ Python —Ñ–∞–π–ª—ã: {len(python_syntax_errors)}")
        if yaml_syntax_errors:
            print(f"   ‚Ä¢ YAML —Ñ–∞–π–ª—ã: {len(yaml_syntax_errors)}")
        if json_syntax_errors:
            print(f"   ‚Ä¢ JSON —Ñ–∞–π–ª—ã: {len(json_syntax_errors)}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    print("\nüéØ –ü–†–ò–û–†–ò–¢–ï–¢–ù–´–ï –§–ê–ô–õ–´ –î–õ–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:")
    print("-" * 40)
    
    # –§–∞–π–ª—ã –∏–∑ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ LiveKit
    livekit_files = [f for f in error_files if any(keyword in f['path'].lower() 
                     for keyword in ['livekit', 'auth', 'api', 'client', 'sip'])]
    
    for file in livekit_files[:5]:
        print(f"üîß {file['path']}")
        if file['issues']:
            for issue in file['issues'][:2]:
                print(f"   ‚ùå {issue}")
    
    print(f"\nüìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"   ‚Ä¢ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç–µ: {report['classification_summary']['total_files']}")
    print(f"   ‚Ä¢ –§–∞–π–ª–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏: {len(error_files)}")
    print(f"   ‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –æ—à–∏–±–æ–∫: {len(error_files) / report['classification_summary']['total_files'] * 100:.2f}%")
    print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞: {report['classification_summary']['average_quality_score']:.3f}")

if __name__ == "__main__":
    main()