#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–≤–æ–Ω–∫–∞.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã –∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –ø—Ä–∏–µ–º—É –∑–≤–æ–Ω–∫–æ–≤.
"""

import asyncio
import json
import logging
import time
from datetime import datetime, UTC

import aiohttp
import requests

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


async def test_webhook_endpoint():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç webhook endpoint."""
    print("üåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ webhook endpoint...")
    
    try:
        test_event = {
            "event": "room_started",
            "room": {
                "name": "voice-ai-call-test123",
                "sid": "RM_test123",
                "metadata": json.dumps({
                    "caller_number": "+79000000000",
                    "call_type": "test"
                })
            },
            "timestamp": datetime.now(UTC).isoformat()
        }
        
        async with aiohttp.ClientSession() as session:
            async with session.post(
                "http://localhost:8000/webhooks/livekit",
                json=test_event,
                headers={"Content-Type": "application/json"}
            ) as response:
                if response.status == 200:
                    result = await response.json()
                    print(f"‚úÖ Webhook endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç: {result}")
                    return True
                else:
                    print(f"‚ùå Webhook endpoint –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {response.status}")
                    return False
                    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ webhook endpoint: {e}")
        return False


def test_livekit_sip_status():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å LiveKit SIP."""
    print("üìû –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ LiveKit SIP...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        import subprocess
        result = subprocess.run(
            ["docker", "logs", "voice-ai-livekit-sip-fixed", "--tail", "5"],
            capture_output=True,
            text=True
        )
        
        if result.returncode == 0:
            logs = result.stdout
            if "service ready" in logs:
                print("‚úÖ LiveKit SIP —Å–µ—Ä–≤–∏—Å –≥–æ—Ç–æ–≤")
                return True
            else:
                print(f"‚ö†Ô∏è LiveKit SIP –ª–æ–≥–∏: {logs}")
                return False
        else:
            print(f"‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏ LiveKit SIP: {result.stderr}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ LiveKit SIP: {e}")
        return False


def test_network_connectivity():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–µ—Ç–µ–≤—É—é —Å–≤—è–∑–Ω–æ—Å—Ç—å."""
    print("üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–µ–≤–æ–π —Å–≤—è–∑–Ω–æ—Å—Ç–∏...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—Ä—Ç 5060 –æ—Ç–∫—Ä—ã—Ç
        import socket
        sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        sock.settimeout(5)
        
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É –ø–æ—Ä—Ç—É 5060
            sock.connect(('127.0.0.1', 5060))
            print("‚úÖ –ü–æ—Ä—Ç 5060 –¥–æ—Å—Ç—É–ø–µ–Ω")
            return True
        except Exception as e:
            print(f"‚ùå –ü–æ—Ä—Ç 5060 –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            return False
        finally:
            sock.close()
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ç–∏: {e}")
        return False


def test_external_access():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–Ω–µ—à–Ω–∏–π –¥–æ—Å—Ç—É–ø –∫ webhook."""
    print("üåç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–Ω–µ—à–Ω–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å webhook –∏–∑–≤–Ω–µ
        response = requests.get(
            "http://agentio.ru:8000/health",
            timeout=10
        )
        
        if response.status_code == 200:
            print("‚úÖ Webhook –¥–æ—Å—Ç—É–ø–µ–Ω –∏–∑–≤–Ω–µ")
            return True
        else:
            print(f"‚ö†Ô∏è Webhook –¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ —Å—Ç–∞—Ç—É—Å {response.status_code}")
            return True  # –í—Å–µ —Ä–∞–≤–Ω–æ –¥–æ—Å—Ç—É–ø–µ–Ω
            
    except Exception as e:
        print(f"‚ùå Webhook –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–∑–≤–Ω–µ: {e}")
        return False


async def simulate_call_flow():
    """–°–∏–º—É–ª–∏—Ä—É–µ—Ç –ø–æ—Ç–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–≤–æ–Ω–∫–∞."""
    print("üé≠ –°–∏–º—É–ª—è—Ü–∏—è –ø–æ—Ç–æ–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–≤–æ–Ω–∫–∞...")
    
    try:
        # 1. –°–∏–º—É–ª–∏—Ä—É–µ–º room_started
        room_started_event = {
            "event": "room_started",
            "room": {
                "name": "voice-ai-call-sim123",
                "sid": "RM_sim123",
                "metadata": json.dumps({
                    "caller_number": "+79000000001",
                    "call_type": "simulation"
                })
            },
            "timestamp": datetime.now(UTC).isoformat()
        }
        
        async with aiohttp.ClientSession() as session:
            async with session.post(
                "http://localhost:8000/webhooks/livekit",
                json=room_started_event
            ) as response:
                if response.status != 200:
                    print(f"‚ùå –û—à–∏–±–∫–∞ room_started: {response.status}")
                    return False
        
        print("‚úÖ room_started –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
        
        # 2. –°–∏–º—É–ª–∏—Ä—É–µ–º participant_joined
        await asyncio.sleep(1)
        
        participant_joined_event = {
            "event": "participant_joined",
            "room": {
                "name": "voice-ai-call-sim123",
                "sid": "RM_sim123"
            },
            "participant": {
                "identity": "+79000000001",
                "name": "caller",
                "sid": "PA_sim123"
            },
            "timestamp": datetime.now(UTC).isoformat()
        }
        
        async with aiohttp.ClientSession() as session:
            async with session.post(
                "http://localhost:8000/webhooks/livekit",
                json=participant_joined_event
            ) as response:
                if response.status != 200:
                    print(f"‚ùå –û—à–∏–±–∫–∞ participant_joined: {response.status}")
                    return False
        
        print("‚úÖ participant_joined –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
        
        # 3. –°–∏–º—É–ª–∏—Ä—É–µ–º room_finished
        await asyncio.sleep(1)
        
        room_finished_event = {
            "event": "room_finished",
            "room": {
                "name": "voice-ai-call-sim123",
                "sid": "RM_sim123"
            },
            "timestamp": datetime.now(UTC).isoformat()
        }
        
        async with aiohttp.ClientSession() as session:
            async with session.post(
                "http://localhost:8000/webhooks/livekit",
                json=room_finished_event
            ) as response:
                if response.status != 200:
                    print(f"‚ùå –û—à–∏–±–∫–∞ room_finished: {response.status}")
                    return False
        
        print("‚úÖ room_finished –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
        print("‚úÖ –ü–æ–ª–Ω—ã–π –ø–æ—Ç–æ–∫ –∑–≤–æ–Ω–∫–∞ —Å–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏ –∑–≤–æ–Ω–∫–∞: {e}")
        return False


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ì–û–¢–û–í–ù–û–°–¢–ò –ö –ü–†–ò–ï–ú–£ –ó–í–û–ù–ö–û–í")
    print("=" * 60)
    
    tests = [
        ("Webhook endpoint", test_webhook_endpoint()),
        ("LiveKit SIP —Å—Ç–∞—Ç—É—Å", test_livekit_sip_status()),
        ("–°–µ—Ç–µ–≤–∞—è —Å–≤—è–∑–Ω–æ—Å—Ç—å", test_network_connectivity()),
        ("–í–Ω–µ—à–Ω–∏–π –¥–æ—Å—Ç—É–ø", test_external_access()),
        ("–°–∏–º—É–ª—è—Ü–∏—è –∑–≤–æ–Ω–∫–∞", simulate_call_flow())
    ]
    
    results = []
    
    for test_name, test_coro in tests:
        print(f"\nüîç {test_name}...")
        
        if asyncio.iscoroutine(test_coro):
            result = await test_coro
        else:
            result = test_coro
            
        results.append((test_name, result))
        
        if result:
            print(f"‚úÖ {test_name}: –ü–†–û–ô–î–ï–ù")
        else:
            print(f"‚ùå {test_name}: –ü–†–û–í–ê–õ–ï–ù")
    
    print("\n" + "=" * 60)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 60)
    
    passed = sum(1 for _, result in results if result)
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"   {test_name}: {status}")
    
    print(f"\n–ò—Ç–æ–≥–æ: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –ü–†–ò–ï–ú–£ –ó–í–û–ù–ö–û–í!")
        print("\nüìû –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–≤–æ–Ω–∏—Ç—å –Ω–∞ –Ω–æ–º–µ—Ä +79952227978")
        print("ü§ñ –°–∏—Å—Ç–µ–º–∞ –¥–æ–ª–∂–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å AI –∞–≥–µ–Ω—Ç–∞")
    else:
        print(f"\n‚ö†Ô∏è {total - passed} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã.")
    
    return passed == total


if __name__ == "__main__":
    asyncio.run(main())