#!/usr/bin/env python3
"""
–ü–†–ê–í–ò–õ–¨–ù–û–ï –†–ï–®–ï–ù–ò–ï –ø—Ä–æ–±–ª–µ–º—ã LiveKit SIP
–ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ LiveKit API
"""

import os
import sys
import requests
import json
import time
import jwt
import subprocess

def test_livekit_api():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ LiveKit API"""
    print("üîç –¢–µ—Å—Ç–∏—Ä—É—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ LiveKit API...")
    
    api_key = "API48Ajeeuv4tYL"
    api_secret = "Q5eag53mO3WVhUcoRGmI5Y1wjDbCFnf7qn6pJOzakHN"
    url = "wss://voice-mz90cpgw.livekit.cloud"
    
    # –°–æ–∑–¥–∞–µ–º JWT —Ç–æ–∫–µ–Ω
    payload = {
        'iss': api_key,
        'exp': int(time.time()) + 3600,
        'nbf': int(time.time()) - 60,
        'sub': 'test-connection'
    }
    
    token = jwt.encode(payload, api_secret, algorithm='HS256')
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º HTTP API
    http_url = url.replace('wss://', 'https://').replace('ws://', 'http://')
    
    headers = {
        'Authorization': f'Bearer {token}',
        'Content-Type': 'application/json'
    }
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã
        room_data = {
            'name': 'test-room-' + str(int(time.time())),
            'empty_timeout': 300,
            'max_participants': 2
        }
        
        response = requests.post(
            f"{http_url}/twirp/livekit.RoomService/CreateRoom",
            headers=headers,
            json=room_data,
            timeout=30
        )
        
        print(f"üì° –°—Ç–∞—Ç—É—Å —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã: {response.status_code}")
        
        if response.status_code == 200:
            print("‚úÖ LiveKit API —Ä–∞–±–æ—Ç–∞–µ—Ç! –ö–æ–º–Ω–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            
            # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∫–æ–º–Ω–∞—Ç—É
            delete_data = {'room': room_data['name']}
            requests.post(
                f"{http_url}/twirp/livekit.RoomService/DeleteRoom",
                headers=headers,
                json=delete_data,
                timeout=10
            )
            
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ LiveKit API: {e}")
        return False

def create_working_config():
    """–°–æ–∑–¥–∞–µ—Ç —Ä–∞–±–æ—á—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é SIP"""
    print("üîß –°–æ–∑–¥–∞—é —Ä–∞–±–æ—á—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é SIP...")
    
    config = """# –†–ê–ë–û–ß–ê–Ø –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø LIVEKIT SIP
# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ LiveKit API

livekit:
  url: wss://voice-mz90cpgw.livekit.cloud
  api_key: API48Ajeeuv4tYL
  api_secret: Q5eag53mO3WVhUcoRGmI5Y1wjDbCFnf7qn6pJOzakHN
  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç—ã –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
  timeout: 30s
  retry_attempts: 5
  connection:
    timeout: 30000
    keep_alive: 25000
    reconnect: true
    max_reconnect_attempts: 10
    reconnect_delay: 1000

redis:
  address: voice-ai-redis-simple:6379

# SIP trunk –¥–ª—è –≤—Ö–æ–¥—è—â–∏—Ö –∑–≤–æ–Ω–∫–æ–≤
sip_trunks:
- name: novofon-trunk
  # –ù–ï –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Novofon –∫–∞–∫ –∫–ª–∏–µ–Ω—Ç
  # –†–∞–±–æ—Ç–∞–µ–º –∫–∞–∫ SIP —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø—Ä–∏–µ–º–∞ –∑–≤–æ–Ω–∫–æ–≤
  inbound: true
  outbound: false
  # –£–±–∏—Ä–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é - –º—ã —Å–µ—Ä–≤–µ—Ä, –Ω–µ –∫–ª–∏–µ–Ω—Ç
  register: false

# –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è - –ø—Ä–∏–Ω–∏–º–∞–µ–º –∑–≤–æ–Ω–∫–∏ –Ω–∞ –Ω–∞—à –Ω–æ–º–µ—Ä
routing:
  inbound_rules:
  - name: accept-inbound-calls
    match:
      to: "79952227978"
    action:
      type: livekit_room
      room_name_template: "voice-call-{call_id}"
      participant_name: "caller"
      participant_identity: "{caller_number}"
      metadata:
        webhook_url: "http://agentio.ru:8000/webhooks/livekit"
        call_type: "inbound"

# Webhook –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
webhooks:
  enabled: true
  url: http://agentio.ru:8000/webhooks/livekit
  secret: voice-ai-agent-secret-key-change-in-production
  timeout: 15000
  events:
  - room_started
  - room_finished
  - participant_joined
  - participant_left
  retry:
    enabled: true
    max_attempts: 5
    initial_delay: 1000
    max_delay: 30000
    multiplier: 2.0

logging:
  level: DEBUG
"""
    
    with open('livekit-sip-fixed.yaml', 'w') as f:
        f.write(config)
    
    print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ livekit-sip-fixed.yaml")

def rebuild_and_restart():
    """–ü–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ—Ç –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç SIP —Å–µ—Ä–≤–∏—Å"""
    print("üîÑ –ü–µ—Ä–µ—Å–æ–±–∏—Ä–∞—é –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é SIP —Å–µ—Ä–≤–∏—Å...")
    
    try:
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–µ—Ä–≤–∏—Å
        subprocess.run(['docker', 'stop', 'voice-ai-livekit-sip'], 
                      capture_output=True, check=False)
        subprocess.run(['docker', 'rm', 'voice-ai-livekit-sip'], 
                      capture_output=True, check=False)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º Dockerfile
        dockerfile_content = """FROM livekit/sip:latest

# Copy FIXED config
COPY livekit-sip-fixed.yaml /sip/config.yaml

# Set working directory
WORKDIR /sip

# Run the SIP service
CMD ["livekit-sip"]
"""
        
        with open('Dockerfile.livekit-sip', 'w') as f:
            f.write(dockerfile_content)
        
        # –°–æ–±–∏—Ä–∞–µ–º –Ω–æ–≤—ã–π –æ–±—Ä–∞–∑
        result = subprocess.run([
            'docker', 'build', '-f', 'Dockerfile.livekit-sip', 
            '-t', 'voice-ai-livekit-sip', '.'
        ], capture_output=True, text=True)
        
        if result.returncode != 0:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏: {result.stderr}")
            return False
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        result = subprocess.run([
            'docker', 'run', '-d',
            '--name', 'voice-ai-livekit-sip',
            '--network', 'root_voice-ai-network',
            '-p', '5060:5060/udp',
            '-p', '10000-10100:10000-10100/udp',
            'voice-ai-livekit-sip'
        ], capture_output=True, text=True)
        
        if result.returncode != 0:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {result.stderr}")
            return False
        
        print("‚úÖ SIP —Å–µ—Ä–≤–∏—Å –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞: {e}")
        return False

def wait_and_test():
    """–ñ–¥–µ—Ç –∑–∞–ø—É—Å–∫–∞ –∏ —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–µ—Ä–≤–∏—Å"""
    print("‚è≥ –ñ–¥—É –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–∞...")
    time.sleep(10)
    
    try:
        result = subprocess.run(['docker', 'logs', 'voice-ai-livekit-sip'], 
                              capture_output=True, text=True)
        
        logs = result.stdout
        
        if 'sip signaling listening on' in logs:
            print("‚úÖ SIP —Å–µ—Ä–≤–∏—Å —Å–ª—É—à–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è")
        
        if 'service ready' in logs:
            print("‚úÖ SIP —Å–µ—Ä–≤–∏—Å –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        
        if 'error' in logs.lower() or 'failed' in logs.lower():
            print("‚ö† –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏ –≤ –ª–æ–≥–∞—Ö:")
            print(logs[-500:])  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 500 —Å–∏–º–≤–æ–ª–æ–≤
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ä–≤–∏—Å–∞: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è - –ü–†–ê–í–ò–õ–¨–ù–û–ï –†–ï–®–ï–ù–ò–ï"""
    print("=== –ü–†–ê–í–ò–õ–¨–ù–û–ï –†–ï–®–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú–´ LIVEKIT SIP ===")
    
    # 1. –¢–µ—Å—Ç–∏—Ä—É–µ–º LiveKit API
    if not test_livekit_api():
        print("‚ùå LiveKit API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–ª—é—á–∏ –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ.")
        return False
    
    # 2. –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    create_working_config()
    
    # 3. –ü–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º
    if not rebuild_and_restart():
        return False
    
    # 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    wait_and_test()
    
    print("\nüéâ –ì–û–¢–û–í–û! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–≤–æ–Ω–∏—Ç—å –Ω–∞ +79952227978")
    print("SIP —Å–µ—Ä–≤–∏—Å –¥–æ–ª–∂–µ–Ω –ø—Ä–∏–Ω–∏–º–∞—Ç—å –≤—Ö–æ–¥—è—â–∏–µ –∑–≤–æ–Ω–∫–∏ –∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫–æ–º–Ω–∞—Ç—ã –≤ LiveKit")
    
    return True

if __name__ == '__main__':
    success = main()
    if not success:
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É")
        sys.exit(1)