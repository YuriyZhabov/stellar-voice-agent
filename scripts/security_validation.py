#!/usr/bin/env python3
"""
–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ LiveKit —Å–∏—Å—Ç–µ–º—ã.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∞—Å–ø–µ–∫—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º.
"""

import os
import re
import ssl
import socket
import asyncio
import logging
import json
import time
from typing import Dict, Any, List
from pathlib import Path
import jwt
from urllib.parse import urlparse

class SecurityValidator:
    """–í–∞–ª–∏–¥–∞—Ç–æ—Ä –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ LiveKit —Å–∏—Å—Ç–µ–º—ã."""
    
    def __init__(self):
        self.logger = logging.getLogger(__name__)
        self.project_root = Path(__file__).parent.parent
        self.security_issues = []
        self.security_warnings = []
    
    async def run_comprehensive_security_audit(self) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –∞—É–¥–∏—Ç–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏."""
        print("üîí –ù–∞—á–∞–ª–æ –∞—É–¥–∏—Ç–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã...")
        
        audit_results = {
            "timestamp": time.strftime("%Y-%m-%d %H:%M:%S"),
            "checks": {}
        }
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—â–∏—Ç—ã API –∫–ª—é—á–µ–π
        audit_results["checks"]["api_keys_protection"] = await self._check_api_keys_protection()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è WSS —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        audit_results["checks"]["wss_connections"] = await self._check_wss_connections()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ JWT —Ç–æ–∫–µ–Ω–æ–≤
        audit_results["checks"]["jwt_security"] = await self._check_jwt_security()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        audit_results["checks"]["permissions_validation"] = await self._check_permissions_validation()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        audit_results["checks"]["config_security"] = await self._check_config_security()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        audit_results["checks"]["logging_security"] = await self._check_logging_security()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–µ–≤–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        audit_results["checks"]["network_security"] = await self._check_network_security()
        
        # –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        audit_results["overall_assessment"] = self._assess_overall_security(audit_results["checks"])
        audit_results["security_issues"] = self.security_issues
        audit_results["security_warnings"] = self.security_warnings
        
        return audit_results
    
    async def _check_api_keys_protection(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—â–∏—Ç—ã API –∫–ª—é—á–µ–π –æ—Ç —É—Ç–µ—á–∫–∏."""
        print("  üîë –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—â–∏—Ç—ã API –∫–ª—é—á–µ–π...")
        
        issues = []
        warnings = []
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        api_key = os.getenv('LIVEKIT_API_KEY')
        api_secret = os.getenv('LIVEKIT_API_SECRET')
        
        if not api_key or not api_secret:
            issues.append("API –∫–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ö–∞—Ä–¥–∫–æ–¥–Ω—ã—Ö –∫–ª—é—á–µ–π
        source_files = list(self.project_root.rglob("*.py"))
        source_files.extend(list(self.project_root.rglob("*.yaml")))
        source_files.extend(list(self.project_root.rglob("*.yml")))
        
        hardcoded_patterns = [
            r'LIVEKIT_API_KEY\s*=\s*["\'][^"\']+["\']',
            r'LIVEKIT_API_SECRET\s*=\s*["\'][^"\']+["\']',
            r'api_key\s*:\s*["\'][^"\']+["\']',
            r'api_secret\s*:\s*["\'][^"\']+["\']'
        ]
        
        for file_path in source_files:
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                    
                for pattern in hardcoded_patterns:
                    if re.search(pattern, content, re.IGNORECASE):
                        issues.append(f"–í–æ–∑–º–æ–∂–Ω–æ —Ö–∞—Ä–¥–∫–æ–¥–Ω—ã–π –∫–ª—é—á –≤ —Ñ–∞–π–ª–µ: {file_path}")
                        break
                        
            except Exception:
                continue
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ .env —Ñ–∞–π–ª–∞
        env_file = self.project_root / ".env"
        if env_file.exists():
            try:
                with open(env_file, 'r') as f:
                    env_content = f.read()
                    if "LIVEKIT_API_KEY=" in env_content and "LIVEKIT_API_SECRET=" in env_content:
                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —Ñ–∞–π–ª –Ω–µ –≤ git
                        gitignore_file = self.project_root / ".gitignore"
                        if gitignore_file.exists():
                            with open(gitignore_file, 'r') as gf:
                                gitignore_content = gf.read()
                                if ".env" not in gitignore_content:
                                    warnings.append(".env —Ñ–∞–π–ª –º–æ–∂–µ—Ç –Ω–µ –±—ã—Ç—å –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ git")
            except Exception:
                pass
        
        self.security_issues.extend(issues)
        self.security_warnings.extend(warnings)
        
        return {
            "status": "FAIL" if issues else "PASS",
            "issues": issues,
            "warnings": warnings,
            "api_keys_in_env": bool(api_key and api_secret),
            "hardcoded_keys_found": len([i for i in issues if "—Ö–∞—Ä–¥–∫–æ–¥–Ω—ã–π –∫–ª—é—á" in i])
        }   
 async def _check_wss_connections(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è WSS —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π."""
        print("  üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ WSS —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π...")
        
        issues = []
        warnings = []
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ URL LiveKit
        livekit_url = os.getenv('LIVEKIT_URL', '')
        
        if livekit_url:
            parsed_url = urlparse(livekit_url)
            if parsed_url.scheme not in ['https', 'wss']:
                issues.append(f"LiveKit URL –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª: {parsed_url.scheme}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
            if parsed_url.scheme in ['https', 'wss']:
                try:
                    hostname = parsed_url.hostname
                    port = parsed_url.port or (443 if parsed_url.scheme == 'https' else 443)
                    
                    context = ssl.create_default_context()
                    with socket.create_connection((hostname, port), timeout=10) as sock:
                        with context.wrap_socket(sock, server_hostname=hostname) as ssock:
                            cert = ssock.getpeercert()
                            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
                            import datetime
                            not_after = datetime.datetime.strptime(cert['notAfter'], '%b %d %H:%M:%S %Y %Z')
                            if not_after < datetime.datetime.now():
                                issues.append("SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –∏—Å—Ç–µ–∫")
                            elif (not_after - datetime.datetime.now()).days < 30:
                                warnings.append("SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –∏—Å—Ç–µ–∫–∞–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –¥–Ω–µ–π")
                                
                except Exception as e:
                    warnings.append(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç: {e}")
        else:
            issues.append("LIVEKIT_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ HTTP
        config_files = list(self.project_root.rglob("*.yaml"))
        config_files.extend(list(self.project_root.rglob("*.yml")))
        config_files.extend(list(self.project_root.rglob("*.py")))
        
        for file_path in config_files:
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                    if re.search(r'http://[^/\s]+', content):
                        warnings.append(f"–ù–∞–π–¥–µ–Ω—ã HTTP URL –≤ —Ñ–∞–π–ª–µ: {file_path}")
            except Exception:
                continue
        
        self.security_issues.extend(issues)
        self.security_warnings.extend(warnings)
        
        return {
            "status": "FAIL" if issues else "PASS",
            "issues": issues,
            "warnings": warnings,
            "livekit_url_secure": livekit_url.startswith(('https://', 'wss://')) if livekit_url else False
        }
    
    async def _check_jwt_security(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ JWT —Ç–æ–∫–µ–Ω–æ–≤."""
        print("  üé´ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ JWT —Ç–æ–∫–µ–Ω–æ–≤...")
        
        issues = []
        warnings = []
        
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è auth –º–æ–¥—É–ª—è
            auth_file = self.project_root / "src" / "auth" / "livekit_auth.py"
            if not auth_file.exists():
                issues.append("–ú–æ–¥—É–ª—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return {
                    "status": "FAIL",
                    "issues": issues,
                    "warnings": warnings
                }
            
            # –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            with open(auth_file, 'r', encoding='utf-8') as f:
                auth_content = f.read()
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞
                if 'HS256' not in auth_content and 'algorithm=' not in auth_content:
                    warnings.append("–ù–µ —É–∫–∞–∑–∞–Ω –∞–ª–≥–æ—Ä–∏—Ç–º –ø–æ–¥–ø–∏—Å–∏ JWT")
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –∂–∏–∑–Ω–∏ —Ç–æ–∫–µ–Ω–æ–≤
                if 'timedelta' in auth_content:
                    # –ü–æ–∏—Å–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤—Ä–µ–º–µ–Ω–∏ –∂–∏–∑–Ω–∏
                    ttl_matches = re.findall(r'timedelta\([^)]+\)', auth_content)
                    for match in ttl_matches:
                        if 'hours' in match:
                            hours_match = re.search(r'hours=(\d+)', match)
                            if hours_match and int(hours_match.group(1)) > 24:
                                warnings.append("–°–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ–µ –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Ç–æ–∫–µ–Ω–∞ (>24 —á–∞—Å–æ–≤)")
                        elif 'days' in match:
                            warnings.append("–í—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Ç–æ–∫–µ–Ω–∞ —É–∫–∞–∑–∞–Ω–æ –≤ –¥–Ω—è—Ö - –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ")
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
                required_fields = ['iss', 'sub', 'iat', 'exp', 'video']
                for field in required_fields:
                    if field not in auth_content:
                        warnings.append(f"–í–æ–∑–º–æ–∂–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ JWT: {field}")
        
        except Exception as e:
            issues.append(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ JWT –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {e}")
        
        self.security_issues.extend(issues)
        self.security_warnings.extend(warnings)
        
        return {
            "status": "FAIL" if issues else ("WARNING" if warnings else "PASS"),
            "issues": issues,
            "warnings": warnings,
            "auth_module_exists": auth_file.exists()
        }
    
    async def _check_permissions_validation(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞."""
        print("  üëÆ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞...")
        
        issues = []
        warnings = []
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å–∏—Å—Ç–µ–º—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–∞–≤
        security_files = [
            self.project_root / "src" / "security" / "livekit_security.py",
            self.project_root / "src" / "auth" / "livekit_auth.py"
        ]
        
        validation_found = False
        for file_path in security_files:
            if file_path.exists():
                try:
                    with open(file_path, 'r', encoding='utf-8') as f:
                        content = f.read()
                        if any(keyword in content.lower() for keyword in ['permission', 'grant', 'validate', 'authorize']):
                            validation_found = True
                            break
                except Exception:
                    continue
        
        if not validation_found:
            issues.append("–°–∏—Å—Ç–µ–º–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è VideoGrants
        auth_file = self.project_root / "src" / "auth" / "livekit_auth.py"
        if auth_file.exists():
            try:
                with open(auth_file, 'r', encoding='utf-8') as f:
                    content = f.read()
                    if 'VideoGrants' not in content:
                        warnings.append("VideoGrants –º–æ–∂–µ—Ç –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è")
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø—Ä–∞–≤
                    required_grants = ['room_join', 'can_publish', 'can_subscribe']
                    for grant in required_grants:
                        if grant not in content:
                            warnings.append(f"–ü—Ä–∞–≤–æ –¥–æ—Å—Ç—É–ø–∞ {grant} –º–æ–∂–µ—Ç –Ω–µ –ø—Ä–æ–≤–µ—Ä—è—Ç—å—Å—è")
            except Exception:
                pass
        
        self.security_issues.extend(issues)
        self.security_warnings.extend(warnings)
        
        return {
            "status": "FAIL" if issues else ("WARNING" if warnings else "PASS"),
            "issues": issues,
            "warnings": warnings,
            "validation_system_found": validation_found
        }    async d
ef _check_config_security(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤."""
        print("  üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
        
        issues = []
        warnings = []
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–∞–º
        sensitive_files = [
            ".env",
            "config/security.yaml",
            "livekit-sip-correct.yaml"
        ]
        
        for file_name in sensitive_files:
            file_path = self.project_root / file_name
            if file_path.exists():
                try:
                    stat_info = file_path.stat()
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã)
                    mode = oct(stat_info.st_mode)[-3:]
                    if mode != '600' and mode != '644':
                        warnings.append(f"–§–∞–π–ª {file_name} –∏–º–µ–µ—Ç —Å–ª–∏—à–∫–æ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞: {mode}")
                except Exception:
                    pass
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å–µ–∫—Ä–µ—Ç–æ–≤ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        config_files = list(self.project_root.rglob("*.yaml"))
        config_files.extend(list(self.project_root.rglob("*.yml")))
        
        for file_path in config_files:
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                    
                    # –ü–æ–∏—Å–∫ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ–∫—Ä–µ—Ç–æ–≤
                    secret_patterns = [
                        r'password\s*:\s*["\'][^"\']{8,}["\']',
                        r'secret\s*:\s*["\'][^"\']{8,}["\']',
                        r'key\s*:\s*["\'][^"\']{8,}["\']'
                    ]
                    
                    for pattern in secret_patterns:
                        if re.search(pattern, content, re.IGNORECASE):
                            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —ç—Ç–æ –Ω–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è
                            if not re.search(r'\$\{[^}]+\}', content):
                                warnings.append(f"–í–æ–∑–º–æ–∂–Ω—ã–π —Ö–∞—Ä–¥–∫–æ–¥–Ω—ã–π —Å–µ–∫—Ä–µ—Ç –≤ —Ñ–∞–π–ª–µ: {file_path}")
                                break
            except Exception:
                continue
        
        self.security_warnings.extend(warnings)
        
        return {
            "status": "WARNING" if warnings else "PASS",
            "issues": issues,
            "warnings": warnings,
            "sensitive_files_checked": len(sensitive_files)
        }
    
    async def _check_logging_security(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è."""
        print("  üìù –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è...")
        
        issues = []
        warnings = []
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –Ω–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ–∫—Ä–µ—Ç–æ–≤
        source_files = list(self.project_root.rglob("*.py"))
        
        dangerous_logging_patterns = [
            r'log.*api_key',
            r'log.*api_secret',
            r'log.*password',
            r'log.*token',
            r'print.*api_key',
            r'print.*api_secret',
            r'print.*password'
        ]
        
        for file_path in source_files:
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                    
                    for pattern in dangerous_logging_patterns:
                        if re.search(pattern, content, re.IGNORECASE):
                            warnings.append(f"–í–æ–∑–º–æ–∂–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ–∫—Ä–µ—Ç–æ–≤ –≤ —Ñ–∞–π–ª–µ: {file_path}")
                            break
            except Exception:
                continue
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        logging_config_files = [
            self.project_root / "config" / "logging.yaml",
            self.project_root / "src" / "monitoring" / "livekit_logging.py"
        ]
        
        logging_configured = any(f.exists() for f in logging_config_files)
        if not logging_configured:
            warnings.append("–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        self.security_warnings.extend(warnings)
        
        return {
            "status": "WARNING" if warnings else "PASS",
            "issues": issues,
            "warnings": warnings,
            "logging_configured": logging_configured
        }
    
    async def _check_network_security(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–µ–≤–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏."""
        print("  üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–µ–≤–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...")
        
        issues = []
        warnings = []
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ SIP –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        sip_config_file = self.project_root / "livekit-sip-correct.yaml"
        if sip_config_file.exists():
            try:
                with open(sip_config_file, 'r', encoding='utf-8') as f:
                    sip_content = f.read()
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ allowed_addresses
                    if "0.0.0.0/0" in sip_content:
                        warnings.append("SIP –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–∞–∑—Ä–µ—à–∞–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å –ª—é–±—ã—Ö IP –∞–¥—Ä–µ—Å–æ–≤")
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
                    if "auth_required: false" in sip_content:
                        issues.append("SIP –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞")
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
                    if "transport: UDP" in sip_content:
                        warnings.append("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è UDP —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –¥–ª—è SIP (–º–µ–Ω–µ–µ –±–µ–∑–æ–ø–∞—Å–µ–Ω —á–µ–º TLS)")
                        
            except Exception:
                pass
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Redis –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        redis_url = os.getenv('REDIS_URL', '')
        if redis_url:
            if not redis_url.startswith('rediss://'):
                warnings.append("Redis –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç SSL/TLS")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ Redis
            if '@' not in redis_url:
                warnings.append("Redis –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –º–æ–∂–µ—Ç –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é")
        
        self.security_issues.extend(issues)
        self.security_warnings.extend(warnings)
        
        return {
            "status": "FAIL" if issues else ("WARNING" if warnings else "PASS"),
            "issues": issues,
            "warnings": warnings,
            "sip_config_exists": sip_config_file.exists(),
            "redis_configured": bool(redis_url)
        }
    
    def _assess_overall_security(self, checks: Dict[str, Any]) -> Dict[str, Any]:
        """–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã."""
        
        critical_failures = sum(1 for check in checks.values() if check.get("status") == "FAIL")
        warnings_count = sum(1 for check in checks.values() if check.get("status") == "WARNING")
        total_checks = len(checks)
        
        if critical_failures > 0:
            overall_status = "CRITICAL"
            risk_level = "HIGH"
        elif warnings_count > total_checks // 2:
            overall_status = "NEEDS_ATTENTION"
            risk_level = "MEDIUM"
        elif warnings_count > 0:
            overall_status = "ACCEPTABLE"
            risk_level = "LOW"
        else:
            overall_status = "SECURE"
            risk_level = "MINIMAL"
        
        recommendations = []
        
        if critical_failures > 0:
            recommendations.append("–ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ —É—Å—Ç—Ä–∞–Ω–∏—Ç–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
        
        if len(self.security_issues) > 0:
            recommendations.append("–ò—Å–ø—Ä–∞–≤—å—Ç–µ –≤—Å–µ –≤—ã—è–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
        
        if len(self.security_warnings) > 0:
            recommendations.append("–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
        
        if not recommendations:
            recommendations.append("–°–∏—Å—Ç–µ–º–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
        
        return {
            "overall_status": overall_status,
            "risk_level": risk_level,
            "critical_failures": critical_failures,
            "warnings_count": warnings_count,
            "total_checks": total_checks,
            "security_score": max(0, 100 - (critical_failures * 30) - (warnings_count * 10)),
            "recommendations": recommendations
        }

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –∞—É–¥–∏—Ç–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏."""
    print("üîí –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –∞—É–¥–∏—Ç–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ LiveKit —Å–∏—Å—Ç–µ–º—ã")
    print("=" * 60)
    
    validator = SecurityValidator()
    
    try:
        audit_results = await validator.run_comprehensive_security_audit()
        
        print("\n" + "=" * 60)
        print("üõ°Ô∏è  –û–¢–ß–ï–¢ –ü–û –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò")
        print("=" * 60)
        
        assessment = audit_results["overall_assessment"]
        print(f"–û–±—â–∏–π —Å—Ç–∞—Ç—É—Å: {assessment['overall_status']}")
        print(f"–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: {assessment['risk_level']}")
        print(f"–û—Ü–µ–Ω–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {assessment['security_score']}/100")
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã: {assessment['critical_failures']}")
        print(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {assessment['warnings_count']}")
        
        print("\nüìã –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        for i, rec in enumerate(assessment["recommendations"], 1):
            print(f"{i}. {rec}")
        
        if audit_results["security_issues"]:
            print("\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´:")
            for i, issue in enumerate(audit_results["security_issues"], 1):
                print(f"{i}. {issue}")
        
        if audit_results["security_warnings"]:
            print("\n‚ö†Ô∏è  –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø:")
            for i, warning in enumerate(audit_results["security_warnings"], 1):
                print(f"{i}. {warning}")
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        report_file = f"security_audit_report_{int(time.time())}.json"
        with open(report_file, 'w', encoding='utf-8') as f:
            json.dump(audit_results, f, indent=2, ensure_ascii=False)
        
        print(f"\nüìÑ –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {report_file}")
        
        # –í–æ–∑–≤—Ä–∞—Ç –∫–æ–¥–∞ –≤—ã—Ö–æ–¥–∞
        if assessment['overall_status'] == "CRITICAL":
            sys.exit(1)
        elif assessment['overall_status'] in ["NEEDS_ATTENTION", "ACCEPTABLE"]:
            sys.exit(2)
        else:
            sys.exit(0)
            
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∞—É–¥–∏—Ç–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {e}")
        sys.exit(1)

if __name__ == "__main__":
    import sys
    asyncio.run(main())