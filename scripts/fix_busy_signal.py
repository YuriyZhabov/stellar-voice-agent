#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã "–∑–∞–Ω—è—Ç–æ" –ø—Ä–∏ –∑–≤–æ–Ω–∫–∞—Ö.
"""

import asyncio
import json
import logging
import subprocess
import time
from datetime import datetime, UTC

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


def check_livekit_sip_status():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å LiveKit SIP."""
    print("üìû –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ LiveKit SIP...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–ø—É—â–µ–Ω
        result = subprocess.run(
            ["docker", "ps", "--filter", "name=voice-ai-livekit-sip", "--format", "{{.Names}}\t{{.Status}}"],
            capture_output=True,
            text=True
        )
        
        if result.returncode == 0 and result.stdout.strip():
            print(f"‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–ø—É—â–µ–Ω: {result.stdout.strip()}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏ –Ω–∞ –æ—à–∏–±–∫–∏
            log_result = subprocess.run(
                ["docker", "logs", "voice-ai-livekit-sip-correct", "--tail", "10"],
                capture_output=True,
                text=True
            )
            
            if "service ready" in log_result.stdout:
                print("‚úÖ LiveKit SIP —Å–µ—Ä–≤–∏—Å –≥–æ—Ç–æ–≤")
                return True
            else:
                print("‚ö†Ô∏è LiveKit SIP –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –≥–æ—Ç–æ–≤")
                print(f"–õ–æ–≥–∏: {log_result.stdout}")
                return False
        else:
            print("‚ùå LiveKit SIP –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ LiveKit SIP: {e}")
        return False


def check_sip_port():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å SIP –ø–æ—Ä—Ç–∞."""
    print("üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ SIP –ø–æ—Ä—Ç–∞ 5060...")
    
    try:
        result = subprocess.run(
            ["netstat", "-ulnp", "|", "grep", ":5060"],
            shell=True,
            capture_output=True,
            text=True
        )
        
        if "5060" in result.stdout:
            print("‚úÖ –ü–æ—Ä—Ç 5060 —Å–ª—É—à–∞–µ—Ç—Å—è")
            return True
        else:
            print("‚ùå –ü–æ—Ä—Ç 5060 –Ω–µ —Å–ª—É—à–∞–µ—Ç—Å—è")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Ä—Ç–∞: {e}")
        return False


def check_webhook_endpoint():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç webhook endpoint."""
    print("üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ webhook endpoint...")
    
    try:
        import requests
        response = requests.post(
            "http://localhost:8000/webhooks/livekit",
            json={"event": "test", "room": {"name": "test"}},
            timeout=5
        )
        
        if response.status_code == 200:
            print("‚úÖ Webhook endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return True
        else:
            print(f"‚ö†Ô∏è Webhook endpoint –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå Webhook endpoint –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        return False


def monitor_incoming_calls():
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç –≤—Ö–æ–¥—è—â–∏–µ –∑–≤–æ–Ω–∫–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏."""
    print("üëÅÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—Ö–æ–¥—è—â–∏—Ö –∑–≤–æ–Ω–∫–æ–≤ (–Ω–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏)...")
    print("üìû –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–≤–æ–Ω–∏—Ç—å –Ω–∞ +79952227978")
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        process = subprocess.Popen(
            ["docker", "logs", "-f", "voice-ai-livekit-sip-correct"],
            stdout=subprocess.PIPE,
            stderr=subprocess.STDOUT,
            text=True,
            bufsize=1,
            universal_newlines=True
        )
        
        for line in process.stdout:
            line = line.strip()
            if not line:
                continue
                
            # –§–∏–ª—å—Ç—Ä—É–µ–º –≤–∞–∂–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
            if "processing invite" in line.lower():
                print(f"üìû –í–•–û–î–Ø–©–ò–ô –ó–í–û–ù–û–ö: {line}")
            elif "rejecting inbound" in line.lower():
                print(f"‚ùå –ó–í–û–ù–û–ö –û–¢–ö–õ–û–ù–ï–ù: {line}")
            elif "auth check failed" in line.lower():
                print(f"üîê –û–®–ò–ë–ö–ê –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò: {line}")
            elif "room created" in line.lower():
                print(f"üè† –ö–û–ú–ù–ê–¢–ê –°–û–ó–î–ê–ù–ê: {line}")
            elif "participant joined" in line.lower():
                print(f"üë§ –£–ß–ê–°–¢–ù–ò–ö –ü–†–ò–°–û–ï–î–ò–ù–ò–õ–°–Ø: {line}")
            elif "error" in line.lower() or "warn" in line.lower():
                print(f"‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï/–û–®–ò–ë–ö–ê: {line}")
                
    except KeyboardInterrupt:
        print("\nüõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        process.terminate()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")


def suggest_fixes():
    """–ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤–æ–∑–º–æ–∂–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è."""
    print("\nüîß –í–û–ó–ú–û–ñ–ù–´–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:")
    print("=" * 50)
    
    print("1. üìû –ü–†–û–í–ï–†–¨–¢–ï –ù–ê–°–¢–†–û–ô–ö–ò NOVOFON:")
    print("   - –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –Ω–æ–º–µ—Ä +79952227978 –∞–∫—Ç–∏–≤–µ–Ω")
    print("   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏–∏ –Ω–∞ 94.131.122.253:5060")
    print("   - –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –Ω–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –∏–ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π")
    
    print("\n2. üåê –ü–†–û–í–ï–†–¨–¢–ï –°–ï–¢–ï–í–´–ï –ù–ê–°–¢–†–û–ô–ö–ò:")
    print("   - –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–æ—Ä—Ç 5060/UDP –æ—Ç–∫—Ä—ã—Ç –≤ firewall")
    print("   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –Ω–µ—Ç NAT –ø—Ä–æ–±–ª–µ–º")
    print("   - –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ IP 94.131.122.253 –¥–æ—Å—Ç—É–ø–µ–Ω –∏–∑–≤–Ω–µ")
    
    print("\n3. üîß –ü–†–û–í–ï–†–¨–¢–ï –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Æ LIVEKIT SIP:")
    print("   - –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è")
    print("   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ auth_required: false")
    print("   - –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ inbound_only: true")
    
    print("\n4. üìã –ü–†–û–í–ï–†–¨–¢–ï –õ–û–ì–ò:")
    print("   - docker logs voice-ai-livekit-sip-correct")
    print("   - –ò—â–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
    
    print("\n5. üÜò –≠–ö–°–¢–†–ï–ù–ù–´–ï –ú–ï–†–´:")
    print("   - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ LiveKit SIP –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä")
    print("   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ Redis –¥–æ—Å—Ç—É–ø–µ–Ω")
    print("   - –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ LiveKit —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏."""
    print("üö® –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú–´ '–ó–ê–ù–Ø–¢–û'")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    checks = [
        ("LiveKit SIP —Å—Ç–∞—Ç—É—Å", check_livekit_sip_status()),
        ("SIP –ø–æ—Ä—Ç 5060", check_sip_port()),
        ("Webhook endpoint", check_webhook_endpoint())
    ]
    
    all_good = True
    for check_name, result in checks:
        if not result:
            all_good = False
    
    if all_good:
        print("\n‚úÖ –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç")
        print("üîç –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—Ö–æ–¥—è—â–∏—Ö –∑–≤–æ–Ω–∫–æ–≤...")
        monitor_incoming_calls()
    else:
        print("\n‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏")
        suggest_fixes()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")