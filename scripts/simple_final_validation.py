#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–∞—è —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã LiveKit.
–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞ –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –±–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏.
"""

import os
import sys
import time
import asyncio
from pathlib import Path

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
def load_env_file():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞."""
    env_file = Path(__file__).parent.parent / ".env"
    if env_file.exists():
        with open(env_file, 'r') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#') and '=' in line:
                    key, value = line.split('=', 1)
                    os.environ[key] = value
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ {env_file}")
    else:
        print(f"‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω: {env_file}")

async def validate_environment():
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è."""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    
    required_vars = [
        'LIVEKIT_URL',
        'LIVEKIT_API_KEY',
        'LIVEKIT_API_SECRET'
    ]
    
    missing_vars = []
    for var in required_vars:
        if not os.getenv(var):
            missing_vars.append(var)
        else:
            print(f"   ‚úÖ {var}: –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
    
    if missing_vars:
        print(f"   ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {missing_vars}")
        return False
    
    return True

async def validate_config_files():
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤."""
    print("üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...")
    
    project_root = Path(__file__).parent.parent
    config_files = [
        "livekit-sip-correct.yaml",
        ".env",
        "config/livekit_config.py",
        "config/security.yaml",
        "config/performance.yaml"
    ]
    
    missing_files = []
    for file_path in config_files:
        full_path = project_root / file_path
        if full_path.exists():
            size = full_path.stat().st_size
            print(f"   ‚úÖ {file_path}: —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ({size} –±–∞–π—Ç)")
        else:
            missing_files.append(file_path)
            print(f"   ‚ùå {file_path}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
    
    return len(missing_files) == 0

async def validate_basic_imports():
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤."""
    print("üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤ –º–æ–¥—É–ª–µ–π...")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src
    sys.path.append(str(Path(__file__).parent.parent / "src"))
    
    modules_to_test = [
        ("auth.livekit_auth", "LiveKitAuthManager"),
        ("clients.livekit_api_client", "LiveKitAPIClient"),
        ("monitoring.livekit_system_monitor", "LiveKitSystemMonitor"),
        ("security.livekit_security", "LiveKitSecurityValidator"),
        ("performance_optimizer", "PerformanceOptimizer"),
        ("integration.livekit_voice_ai_integration", "LiveKitVoiceAIIntegration")
    ]
    
    successful_imports = 0
    for module_name, class_name in modules_to_test:
        try:
            module = __import__(module_name, fromlist=[class_name])
            getattr(module, class_name)
            print(f"   ‚úÖ {module_name}.{class_name}: –∏–º–ø–æ—Ä—Ç —É—Å–ø–µ—à–µ–Ω")
            successful_imports += 1
        except Exception as e:
            print(f"   ‚ùå {module_name}.{class_name}: –æ—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ - {e}")
    
    return successful_imports == len(modules_to_test)

async def test_basic_authentication():
    """–¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏."""
    print("üîê –¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...")
    
    try:
        from auth.livekit_auth import LiveKitAuthManager
        
        api_key = os.getenv('LIVEKIT_API_KEY')
        api_secret = os.getenv('LIVEKIT_API_SECRET')
        
        if not api_key or not api_secret:
            print("   ‚ùå API –∫–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            return False
        
        auth_manager = LiveKitAuthManager(api_key, api_secret)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
        token = auth_manager.create_participant_token("test-user", "test-room")
        
        if token and len(token) > 50:  # JWT —Ç–æ–∫–µ–Ω—ã –æ–±—ã—á–Ω–æ –¥–ª–∏–Ω–Ω—ã–µ
            print("   ‚úÖ JWT —Ç–æ–∫–µ–Ω —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–æ–∫–µ–Ω–∞
            import jwt
            payload = jwt.decode(token, options={"verify_signature": False})
            required_fields = ['iss', 'sub', 'iat', 'exp']
            
            missing_fields = [field for field in required_fields if field not in payload]
            if missing_fields:
                print(f"   ‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è –≤ JWT: {missing_fields}")
                return False
            else:
                print("   ‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ JWT —Ç–æ–∫–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
                return True
        else:
            print("   ‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JWT —Ç–æ–∫–µ–Ω")
            return False
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
        return False

async def test_api_client_initialization():
    """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ API –∫–ª–∏–µ–Ω—Ç–∞."""
    print("üåê –¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ API –∫–ª–∏–µ–Ω—Ç–∞...")
    
    try:
        from clients.livekit_api_client import LiveKitAPIClient
        
        livekit_url = os.getenv('LIVEKIT_URL')
        api_key = os.getenv('LIVEKIT_API_KEY')
        api_secret = os.getenv('LIVEKIT_API_SECRET')
        
        client = LiveKitAPIClient(livekit_url, api_key, api_secret)
        
        if client:
            print("   ‚úÖ API –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            return True
        else:
            print("   ‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ API –∫–ª–∏–µ–Ω—Ç–∞")
            return False
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ API –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        return False

async def run_simple_validation():
    """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏."""
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç–æ–π —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã LiveKit")
    print("=" * 70)
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    load_env_file()
    
    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–æ–∫
    checks = [
        ("–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è", validate_environment()),
        ("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã", validate_config_files()),
        ("–ò–º–ø–æ—Ä—Ç—ã –º–æ–¥—É–ª–µ–π", validate_basic_imports()),
        ("–ë–∞–∑–æ–≤–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è", test_basic_authentication()),
        ("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API –∫–ª–∏–µ–Ω—Ç–∞", test_api_client_initialization())
    ]
    
    results = []
    for check_name, check_coro in checks:
        print(f"\n--- {check_name} ---")
        try:
            result = await check_coro
            results.append((check_name, result))
        except Exception as e:
            print(f"   ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            results.append((check_name, False))
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 70)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –ü–†–û–°–¢–û–ô –í–ê–õ–ò–î–ê–¶–ò–ò")
    print("=" * 70)
    
    passed_checks = sum(1 for _, result in results if result)
    total_checks = len(results)
    
    print(f"–ü—Ä–æ–π–¥–µ–Ω–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: {passed_checks}/{total_checks}")
    
    for check_name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù–û" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù–û"
        print(f"   {status}: {check_name}")
    
    if passed_checks == total_checks:
        print("\nüéâ –í—Å–µ –±–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print("–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –¥–ª—è –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        return 0
    elif passed_checks >= total_checks * 0.8:  # 80% –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø—Ä–æ–π–¥–µ–Ω–æ
        print("\n‚ö†Ô∏è  –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø—Ä–æ–π–¥–µ–Ω–æ, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã.")
        print("–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å –≤—ã—è–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã.")
        return 2
    else:
        print("\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–∏—Å—Ç–µ–º–æ–π!")
        print("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º.")
        return 1

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    try:
        exit_code = await run_simple_validation()
        sys.exit(exit_code)
    except Exception as e:
        print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
        sys.exit(1)

if __name__ == "__main__":
    asyncio.run(main())