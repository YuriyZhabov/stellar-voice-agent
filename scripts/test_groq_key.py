#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞ Groq API
"""

import requests
import json

def test_groq_key(api_key):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–ª—é—á Groq API"""
    
    if not api_key or api_key.strip() == "":
        print("‚ùå API –∫–ª—é—á –ø—É—Å—Ç–æ–π")
        return False
    
    print(f"üîë –¢–µ—Å—Ç–∏—Ä—É—é –∫–ª—é—á: {api_key[:20]}...")
    
    headers = {
        'Authorization': f'Bearer {api_key}',
        'Content-Type': 'application/json'
    }
    
    data = {
        "messages": [
            {
                "role": "user", 
                "content": "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç API."
            }
        ],
        "model": "llama3-8b-8192",
        "max_tokens": 50
    }
    
    try:
        response = requests.post(
            'https://api.groq.com/openai/v1/chat/completions',
            headers=headers,
            json=data,
            timeout=30
        )
        
        print(f"üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        
        if response.status_code == 200:
            result = response.json()
            message = result['choices'][0]['message']['content']
            print(f"‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç! –û—Ç–≤–µ—Ç: {message[:100]}...")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ API: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return False

def main():
    print("=== –¢–ï–°–¢ GROQ API –ö–õ–Æ–ß–ê ===")
    
    # –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫–ª—é—á –∑–¥–µ—Å—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    new_key = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π Groq API –∫–ª—é—á: ").strip()
    
    if test_groq_key(new_key):
        print("\n‚úÖ –ö–ª—é—á —Ä–∞–±–æ—Ç–∞–µ—Ç! –ú–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –≤ .env —Ñ–∞–π–ª–µ")
        
        # –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∑–∞–º–µ–Ω—É
        replace = input("–ó–∞–º–µ–Ω–∏—Ç—å –∫–ª—é—á –≤ .env —Ñ–∞–π–ª–µ? (y/n): ").strip().lower()
        
        if replace == 'y':
            try:
                # –ß–∏—Ç–∞–µ–º .env —Ñ–∞–π–ª
                with open('.env', 'r') as f:
                    content = f.read()
                
                # –ó–∞–º–µ–Ω—è–µ–º –∫–ª—é—á
                lines = content.split('\n')
                for i, line in enumerate(lines):
                    if line.startswith('GROQ_API_KEY='):
                        lines[i] = f'GROQ_API_KEY={new_key}'
                    elif line.startswith('GROQ_MODEL='):
                        lines[i] = 'GROQ_MODEL=llama3-8b-8192'
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
                with open('.env', 'w') as f:
                    f.write('\n'.join(lines))
                
                print("‚úÖ –ö–ª—é—á –æ–±–Ω–æ–≤–ª–µ–Ω –≤ .env —Ñ–∞–π–ª–µ!")
                print("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –∞–≥–µ–Ω—Ç –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π")
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
    else:
        print("\n‚ùå –ö–ª—é—á –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")

if __name__ == '__main__':
    main()