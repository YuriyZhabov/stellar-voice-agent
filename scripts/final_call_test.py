#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –ø—Ä–∏–µ–º–∞ –∑–≤–æ–Ω–∫–æ–≤.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ —Ä–∞–±–æ—Ç–µ.
"""

import subprocess
import time
import requests

def check_system_status():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã."""
    print("üîç –ü–†–û–í–ï–†–ö–ê –°–¢–ê–¢–£–°–ê –°–ò–°–¢–ï–ú–´")
    print("=" * 50)
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º LiveKit SIP
    try:
        result = subprocess.run(
            ["docker", "logs", "voice-ai-livekit-sip-correct", "--tail", "5"],
            capture_output=True,
            text=True
        )
        
        if "service ready" in result.stdout:
            print("‚úÖ LiveKit SIP: –ì–û–¢–û–í")
        else:
            print("‚ùå LiveKit SIP: –ù–ï –ì–û–¢–û–í")
            return False
    except:
        print("‚ùå LiveKit SIP: –û–®–ò–ë–ö–ê")
        return False
    
    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º webhook
    try:
        response = requests.post(
            "http://localhost:8000/webhooks/livekit",
            json={"event": "test"},
            timeout=5
        )
        if response.status_code == 200:
            print("‚úÖ Webhook: –†–ê–ë–û–¢–ê–ï–¢")
        else:
            print("‚ùå Webhook: –ù–ï –†–ê–ë–û–¢–ê–ï–¢")
            return False
    except:
        print("‚ùå Webhook: –ù–ï–î–û–°–¢–£–ü–ï–ù")
        return False
    
    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—Ç 5060
    try:
        result = subprocess.run(
            ["netstat", "-ulnp"],
            capture_output=True,
            text=True
        )
        if ":5060" in result.stdout:
            print("‚úÖ –ü–æ—Ä—Ç 5060: –°–õ–£–®–ê–ï–¢–°–Ø")
        else:
            print("‚ùå –ü–æ—Ä—Ç 5060: –ù–ï –°–õ–£–®–ê–ï–¢–°–Ø")
            return False
    except:
        print("‚ùå –ü–æ—Ä—Ç 5060: –û–®–ò–ë–ö–ê –ü–†–û–í–ï–†–ö–ò")
        return False
    
    # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º Redis
    try:
        result = subprocess.run(
            ["docker", "exec", "voice-ai-redis-simple", "redis-cli", "ping"],
            capture_output=True,
            text=True
        )
        if "PONG" in result.stdout:
            print("‚úÖ Redis: –†–ê–ë–û–¢–ê–ï–¢")
        else:
            print("‚ùå Redis: –ù–ï –û–¢–í–ï–ß–ê–ï–¢")
            return False
    except:
        print("‚ùå Redis: –û–®–ò–ë–ö–ê")
        return False
    
    return True

def show_call_instructions():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–≤–æ–Ω–∫–∞."""
    print("\nüìû –ò–ù–°–¢–†–£–ö–¶–ò–ò –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 50)
    print("1. –ü–æ–∑–≤–æ–Ω–∏—Ç–µ –Ω–∞ –Ω–æ–º–µ—Ä: +7 995 222 79 78")
    print("2. –û–∂–∏–¥–∞–π—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (–Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å '–∑–∞–Ω—è—Ç–æ')")
    print("3. –ï—Å–ª–∏ –∑–≤–æ–Ω–æ–∫ –ø—Ä–æ—Ö–æ–¥–∏—Ç - —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
    print("4. –ï—Å–ª–∏ '–∑–∞–Ω—è—Ç–æ' - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –Ω–∏–∂–µ")
    
def monitor_next_call():
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç —Å–ª–µ–¥—É—é—â–∏–π –≤—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫."""
    print("\nüëÅÔ∏è –ú–û–ù–ò–¢–û–†–ò–ù–ì –°–õ–ï–î–£–Æ–©–ï–ì–û –ó–í–û–ù–ö–ê")
    print("=" * 50)
    print("üì± –ü–æ–∑–≤–æ–Ω–∏—Ç–µ –°–ï–ô–ß–ê–° –Ω–∞ +79952227978")
    print("‚è±Ô∏è –û–∂–∏–¥–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 60 —Å–µ–∫—É–Ω–¥...")
    
    start_time = time.time()
    timeout = 60  # 60 —Å–µ–∫—É–Ω–¥
    
    try:
        process = subprocess.Popen(
            ["docker", "logs", "-f", "voice-ai-livekit-sip-correct"],
            stdout=subprocess.PIPE,
            stderr=subprocess.STDOUT,
            text=True,
            bufsize=1
        )
        
        while time.time() - start_time < timeout:
            line = process.stdout.readline()
            if not line:
                continue
                
            line = line.strip()
            current_time = time.strftime("%H:%M:%S")
            
            if "processing invite" in line.lower():
                print(f"[{current_time}] üìû –í–•–û–î–Ø–©–ò–ô –ó–í–û–ù–û–ö –û–ë–ù–ê–†–£–ñ–ï–ù!")
                print(f"[{current_time}] üìã –î–µ—Ç–∞–ª–∏: {line}")
                
                # –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
                for _ in range(10):  # –ñ–¥–µ–º –¥–æ 10 —Å–µ–∫—É–Ω–¥
                    result_line = process.stdout.readline()
                    if not result_line:
                        continue
                        
                    result_line = result_line.strip()
                    
                    if "rejecting inbound" in result_line.lower():
                        print(f"[{current_time}] ‚ùå –ó–í–û–ù–û–ö –û–¢–ö–õ–û–ù–ï–ù: {result_line}")
                        print("\nüö® –ü–†–û–ë–õ–ï–ú–ê: –ó–≤–æ–Ω–æ–∫ –æ—Ç–∫–ª–æ–Ω—è–µ—Ç—Å—è —Å–∏—Å—Ç–µ–º–æ–π")
                        print("üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
                        print("   - –ü—Ä–æ–±–ª–µ–º—ã —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π")
                        print("   - –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è")
                        print("   - –ü—Ä–æ–±–ª–µ–º—ã —Å LiveKit —Å–µ—Ä–≤–µ—Ä–æ–º")
                        process.terminate()
                        return False
                        
                    elif "room created" in result_line.lower():
                        print(f"[{current_time}] ‚úÖ –ö–û–ú–ù–ê–¢–ê –°–û–ó–î–ê–ù–ê: {result_line}")
                        print("\nüéâ –£–°–ü–ï–•! –ó–≤–æ–Ω–æ–∫ –ø—Ä–∏–Ω—è—Ç —Å–∏—Å—Ç–µ–º–æ–π!")
                        process.terminate()
                        return True
                        
                    elif "participant joined" in result_line.lower():
                        print(f"[{current_time}] üë§ –£–ß–ê–°–¢–ù–ò–ö –ü–†–ò–°–û–ï–î–ò–ù–ò–õ–°–Ø: {result_line}")
                        
                    time.sleep(1)
                
                print(f"[{current_time}] ‚è±Ô∏è –û–∂–∏–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏...")
                
        print(f"\n‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ ({timeout} —Å–µ–∫)")
        print("üìû –ó–≤–æ–Ω–æ–∫ –Ω–µ –±—ã–ª –æ–±–Ω–∞—Ä—É–∂–µ–Ω")
        process.terminate()
        return None
        
    except KeyboardInterrupt:
        print("\nüõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        process.terminate()
        return None
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
        return None

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    print("üéØ –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –°–ò–°–¢–ï–ú–´ –ü–†–ò–ï–ú–ê –ó–í–û–ù–ö–û–í")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
    if not check_system_status():
        print("\n‚ùå –°–ò–°–¢–ï–ú–ê –ù–ï –ì–û–¢–û–í–ê!")
        print("üîß –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∑–≤–æ–Ω–∫–æ–≤")
        return
    
    print("\n‚úÖ –í–°–ï –ö–û–ú–ü–û–ù–ï–ù–¢–´ –ì–û–¢–û–í–´!")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    show_call_instructions()
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    try:
        input("\n‚è≥ –ù–∞–∂–º–∏—Ç–µ Enter –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥...")
    except KeyboardInterrupt:
        print("\nüëã –¢–µ—Å—Ç –æ—Ç–º–µ–Ω–µ–Ω")
        return
    
    # –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –∑–≤–æ–Ω–æ–∫
    result = monitor_next_call()
    
    if result is True:
        print("\nüéâ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù –£–°–ü–ï–®–ù–û!")
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø—Ä–∏–µ–º—É –∑–≤–æ–Ω–∫–æ–≤")
        print("ü§ñ AI –∞–≥–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø—Ä–∏ –∑–≤–æ–Ω–∫–∞—Ö")
    elif result is False:
        print("\n‚ùå –¢–ï–°–¢ –ü–†–û–í–ê–õ–ï–ù!")
        print("üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞")
    else:
        print("\n‚ö†Ô∏è –¢–ï–°–¢ –ù–ï –ó–ê–í–ï–†–®–ï–ù")
        print("üìû –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–≤–æ–Ω–∏—Ç—å –µ—â–µ —Ä–∞–∑")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\nüëã –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")