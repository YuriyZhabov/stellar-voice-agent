#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤—Ö–æ–¥—è—â–∏—Ö –∑–≤–æ–Ω–∫–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏.
–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –ª–æ–≥–∏ LiveKit SIP –∏ webhook —Å–æ–±—ã—Ç–∏—è.
"""

import asyncio
import json
import logging
import subprocess
import time
from datetime import datetime, UTC

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


class CallMonitor:
    """–ú–æ–Ω–∏—Ç–æ—Ä –≤—Ö–æ–¥—è—â–∏—Ö –∑–≤–æ–Ω–∫–æ–≤."""
    
    def __init__(self):
        self.running = False
        self.last_log_time = time.time()
        
    async def monitor_livekit_logs(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç –ª–æ–≥–∏ LiveKit SIP."""
        print("üìû –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥–æ–≤ LiveKit SIP...")
        
        while self.running:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ –ª–æ–≥–∏
                result = subprocess.run(
                    ["docker", "logs", "voice-ai-livekit-sip-fixed", "--since", "10s"],
                    capture_output=True,
                    text=True
                )
                
                if result.returncode == 0 and result.stdout.strip():
                    logs = result.stdout.strip()
                    for line in logs.split('\n'):
                        if line.strip():
                            await self.process_sip_log(line)
                
                await asyncio.sleep(2)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ª–æ–≥–æ–≤: {e}")
                await asyncio.sleep(5)
    
    async def process_sip_log(self, log_line):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –ª–æ–≥–∞ SIP."""
        try:
            # –ò—â–µ–º –≤–∞–∂–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
            if "processing invite" in log_line.lower():
                print(f"üìû –í–•–û–î–Ø–©–ò–ô –ó–í–û–ù–û–ö: {log_line}")
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–≤–æ–Ω–∫–µ
                if "fromUser" in log_line and "toUser" in log_line:
                    # –ü–∞—Ä—Å–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–≤–æ–Ω–∫–µ
                    parts = log_line.split('"')
                    call_info = {}
                    for i, part in enumerate(parts):
                        if "fromUser" in part:
                            call_info["from"] = parts[i+1] if i+1 < len(parts) else "unknown"
                        elif "toUser" in part:
                            call_info["to"] = parts[i+1] if i+1 < len(parts) else "unknown"
                        elif "callID" in part:
                            call_info["call_id"] = parts[i+1] if i+1 < len(parts) else "unknown"
                    
                    print(f"   üìã –û—Ç: {call_info.get('from', 'unknown')}")
                    print(f"   üìã –ö: {call_info.get('to', 'unknown')}")
                    print(f"   üìã ID: {call_info.get('call_id', 'unknown')}")
                    
            elif "rejecting inbound" in log_line.lower():
                print(f"‚ùå –ó–í–û–ù–û–ö –û–¢–ö–õ–û–ù–ï–ù: {log_line}")
                
            elif "auth check failed" in log_line.lower():
                print(f"üîê –û–®–ò–ë–ö–ê –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò: {log_line}")
                
            elif "room created" in log_line.lower():
                print(f"üè† –ö–û–ú–ù–ê–¢–ê –°–û–ó–î–ê–ù–ê: {log_line}")
                
            elif "participant joined" in log_line.lower():
                print(f"üë§ –£–ß–ê–°–¢–ù–ò–ö –ü–†–ò–°–û–ï–î–ò–ù–ò–õ–°–Ø: {log_line}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–æ–≥–∞: {e}")
    
    async def monitor_webhook_events(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç webhook —Å–æ–±—ã—Ç–∏—è —á–µ—Ä–µ–∑ –ª–æ–≥–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
        print("üåê –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ webhook —Å–æ–±—ã—Ç–∏–π...")
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –∂–¥–µ–º
        while self.running:
            await asyncio.sleep(5)
    
    async def show_status(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã."""
        while self.running:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
                result = subprocess.run(
                    ["docker", "ps", "--filter", "name=voice-ai", "--format", "table {{.Names}}\t{{.Status}}"],
                    capture_output=True,
                    text=True
                )
                
                if result.returncode == 0:
                    print(f"\nüìä –°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´ ({datetime.now().strftime('%H:%M:%S')})")
                    print("=" * 50)
                    print(result.stdout)
                    print("=" * 50)
                
                await asyncio.sleep(30)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
                await asyncio.sleep(30)
    
    async def start_monitoring(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥."""
        print("üöÄ –ó–ê–ü–£–°–ö –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê –ó–í–û–ù–ö–û–í")
        print("=" * 60)
        print("üìû –û–∂–∏–¥–∞–Ω–∏–µ –≤—Ö–æ–¥—è—â–∏—Ö –∑–≤–æ–Ω–∫–æ–≤ –Ω–∞ –Ω–æ–º–µ—Ä +79952227978")
        print("üõë –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        print("=" * 60)
        
        self.running = True
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –º–æ–Ω–∏—Ç–æ—Ä—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        tasks = [
            asyncio.create_task(self.monitor_livekit_logs()),
            asyncio.create_task(self.monitor_webhook_events()),
            asyncio.create_task(self.show_status())
        ]
        
        try:
            await asyncio.gather(*tasks)
        except KeyboardInterrupt:
            print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
            self.running = False
            
            # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏
            for task in tasks:
                task.cancel()
                try:
                    await task
                except asyncio.CancelledError:
                    pass
            
            print("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    monitor = CallMonitor()
    await monitor.start_monitoring()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")