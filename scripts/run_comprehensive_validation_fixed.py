#!/usr/bin/env python3
"""
–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–µ—Å—Ç–æ–≤ –∏ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã.
–û–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –Ω–∞–±–æ—Ä—ã –≤ –µ–¥–∏–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –≤–∞–ª–∏–¥–∞—Ü–∏–∏.
"""

import asyncio
import subprocess
import sys
import os
import json
import time
from pathlib import Path
from typing import Dict, Any, List

class ComprehensiveValidationRunner:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é —Å–∏—Å—Ç–µ–º—ã."""
    
    def __init__(self):
        self.project_root = Path(__file__).parent.parent
        self.test_results = {}
        self.start_time = time.time()
    
    def run_pytest_tests(self) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö pytest —Ç–µ—Å—Ç–æ–≤."""
        print("üß™ –ó–∞–ø—É—Å–∫ pytest —Ç–µ—Å—Ç–æ–≤...")
        
        try:
            # –ó–∞–ø—É—Å–∫ pytest —Å JSON –æ—Ç—á–µ—Ç–æ–º
            result = subprocess.run([
                sys.executable, "-m", "pytest",
                "tests/",
                "--json-report",
                "--json-report-file=test_report.json",
                "-v"
            ], cwd=self.project_root, capture_output=True, text=True)
            
            # –ß—Ç–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            report_file = self.project_root / "test_report.json"
            if report_file.exists():
                with open(report_file, 'r') as f:
                    test_report = json.load(f)
                
                return {
                    "status": "PASSED" if result.returncode == 0 else "FAILED",
                    "return_code": result.returncode,
                    "summary": test_report.get("summary", {}),
                    "tests": test_report.get("tests", []),
                    "stdout": result.stdout,
                    "stderr": result.stderr
                }
            else:
                return {
                    "status": "FAILED",
                    "return_code": result.returncode,
                    "error": "Test report file not found",
                    "stdout": result.stdout,
                    "stderr": result.stderr
                }
                
        except Exception as e:
            return {
                "status": "ERROR",
                "error": str(e)
            }
    
    def check_environment_setup(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è."""
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
        
        required_vars = [
            'LIVEKIT_URL',
            'LIVEKIT_API_KEY',
            'LIVEKIT_API_SECRET'
        ]
        
        optional_vars = [
            'SIP_NUMBER',
            'SIP_SERVER',
            'SIP_USERNAME',
            'SIP_PASSWORD',
            'REDIS_URL'
        ]
        
        env_status = {
            "required_vars": {},
            "optional_vars": {},
            "config_files": {}
        }
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        for var in required_vars:
            env_status["required_vars"][var] = {
                "present": bool(os.getenv(var)),
                "value_length": len(os.getenv(var, ""))
            }
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        for var in optional_vars:
            env_status["optional_vars"][var] = {
                "present": bool(os.getenv(var)),
                "value_length": len(os.getenv(var, ""))
            }
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        config_files = [
            "livekit-sip-correct.yaml",
            ".env",
            "config/livekit_config.py",
            "config/security.yaml",
            "config/performance.yaml"
        ]
        
        for file_path in config_files:
            full_path = self.project_root / file_path
            env_status["config_files"][file_path] = {
                "exists": full_path.exists(),
                "size": full_path.stat().st_size if full_path.exists() else 0
            }
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        required_missing = sum(1 for var_info in env_status["required_vars"].values() if not var_info["present"])
        critical_files_missing = sum(1 for file_info in env_status["config_files"].values() if not file_info["exists"])
        
        if required_missing > 0 or critical_files_missing > 2:
            overall_status = "CRITICAL"
        elif critical_files_missing > 0:
            overall_status = "WARNING"
        else:
            overall_status = "OK"
        
        return {
            "overall_status": overall_status,
            "details": env_status,
            "required_missing": required_missing,
            "files_missing": critical_files_missing
        }

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    runner = ComprehensiveValidationRunner()
    
    try:
        print("üöÄ –ù–∞—á–∞–ª–æ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã LiveKit")
        print("=" * 70)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        env_check = runner.check_environment_setup()
        
        print("\n" + "=" * 70)
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–û–í–ï–†–ö–ò –û–ö–†–£–ñ–ï–ù–ò–Ø")
        print("=" * 70)
        
        print(f"üéØ –°—Ç–∞—Ç—É—Å –æ–∫—Ä—É–∂–µ–Ω–∏—è: {env_check['overall_status']}")
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö: {env_check['required_missing']}")
        print(f"üìÅ –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {env_check['files_missing']}")
        
        # –î–µ—Ç–∞–ª–∏ –ø–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º –æ–∫—Ä—É–∂–µ–Ω–∏—è
        print("\nüîß –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
        for var, info in env_check["details"]["required_vars"].items():
            status = "‚úÖ" if info["present"] else "‚ùå"
            print(f"   {status} {var}: {'–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞' if info['present'] else '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}")
        
        print("\nüîß –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
        for var, info in env_check["details"]["optional_vars"].items():
            status = "‚úÖ" if info["present"] else "‚ö†Ô∏è"
            print(f"   {status} {var}: {'–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞' if info['present'] else '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}")
        
        print("\nüìÅ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:")
        for file_path, info in env_check["details"]["config_files"].items():
            status = "‚úÖ" if info["exists"] else "‚ùå"
            size_info = f" ({info['size']} –±–∞–π—Ç)" if info["exists"] else ""
            print(f"   {status} {file_path}: {'—Å—É—â–µ—Å—Ç–≤—É–µ—Ç' if info['exists'] else '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}{size_info}")
        
        if env_check["overall_status"] == "CRITICAL":
            print("\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
            print("–ò—Å–ø—Ä–∞–≤—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –ø–æ–ª–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏.")
            sys.exit(1)
        elif env_check["overall_status"] == "WARNING":
            print("\n‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
            print("–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º.")
        else:
            print("\n‚úÖ –û–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        
        print("\n" + "=" * 70)
        print("‚úÖ –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        sys.exit(0)
            
    except Exception as e:
        print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    asyncio.run(main())