#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞.
"""

import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', 'src'))

from classification.file_classifier import FileClassifier


def main():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤."""
    print("üîç –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞ LiveKit")
    print("=" * 60)
    
    classifier = FileClassifier()
    
    # –ü—Ä–∏–º–µ—Ä—ã —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
    test_files = [
        # –ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥
        'src/clients/livekit_client.py',
        'src/auth/livekit_auth.py',
        'src/monitoring/health_monitor.py',
        'src/security/encryption.py',
        'src/services/egress_service.py',
        'src/integration/webhook_handler.py',
        'src/database/models.py',
        'src/main.py',
        
        # –¢–µ—Å—Ç—ã
        'tests/test_client.py',
        'tests/test_integration_flow.py',
        'tests/test_load_performance.py',
        'tests/test_security_auth.py',
        'tests/conftest.py',
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        'docker-compose.yml',
        'prometheus.yml',
        'livekit-sip.yaml',
        '.env.production',
        'security.yaml',
        'config.json',
        
        # –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
        'README.md',
        'docs/setup_guide.md',
        'docs/api_reference.md',
        'examples/client_example.md',
        'IMPLEMENTATION_REPORT.md',
        'docs/architecture_design.md',
        'docs/troubleshooting_guide.md',
        
        # –°–∫—Ä–∏–ø—Ç—ã
        'scripts/deploy_production.py',
        'scripts/validate_config.py',
        'scripts/monitor_health.py',
        'scripts/fix_database.py',
        'scripts/run_tests.py',
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã
        'Dockerfile',
        'Makefile',
        'requirements.txt',
        'pyproject.toml',
        'setup.py',
        
        # –î–∞–Ω–Ω—ã–µ
        'data/voice_ai.db',
        
        # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ
        'unknown_file.xyz'
    ]
    
    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    categories = {}
    
    for file_path in test_files:
        category, subcategory = classifier.classify_file(file_path)
        
        if category not in categories:
            categories[category] = {}
        if subcategory not in categories[category]:
            categories[category][subcategory] = []
        
        categories[category][subcategory].append(file_path)
    
    # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    for category, subcategories in categories.items():
        category_info = classifier.get_category_info(category)
        print(f"\nüìÅ {category.upper()}")
        if 'description' in category_info:
            print(f"   {category_info['description']}")
        print("-" * 40)
        
        for subcategory, files in subcategories.items():
            subcategory_info = classifier.get_subcategory_info(category, subcategory)
            print(f"  üìÇ {subcategory}")
            if 'description' in subcategory_info:
                print(f"     {subcategory_info['description']}")
            
            for file_path in files:
                print(f"     ‚Ä¢ {file_path}")
            print()
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_files = len(test_files)
    print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
    print("=" * 30)
    print(f"–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {total_files}")
    print(f"–ö–∞—Ç–µ–≥–æ—Ä–∏–π: {len(categories)}")
    
    for category, subcategories in categories.items():
        count = sum(len(files) for files in subcategories.values())
        print(f"  {category}: {count} —Ñ–∞–π–ª–æ–≤")
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è API
    print(f"\nüîß –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø API")
    print("=" * 30)
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    all_categories = classifier.get_all_categories()
    print(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {', '.join(all_categories)}")
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π
    source_subcategories = classifier.get_subcategories('source_code')
    print(f"–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞: {', '.join(source_subcategories)}")
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
    is_valid = classifier.validate_classification('test.py', 'source_code', 'api_clients')
    print(f"–í–∞–ª–∏–¥–∞—Ü–∏—è (test.py, source_code, api_clients): {is_valid}")
    
    is_invalid = classifier.validate_classification('test.py', 'invalid', 'api_clients')
    print(f"–í–∞–ª–∏–¥–∞—Ü–∏—è (test.py, invalid, api_clients): {is_invalid}")
    
    print(f"\n‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")


if __name__ == '__main__':
    main()