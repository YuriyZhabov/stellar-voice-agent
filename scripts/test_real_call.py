#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∑–≤–æ–Ω–∫–∞ –Ω–∞ Voice AI Agent.

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø–æ–º–æ–∂–µ—Ç –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å:
1. SIP –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å Novofon
2. LiveKit –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
3. –†–∞–±–æ—Ç—É –≤—Å–µ—Ö AI —Å–µ—Ä–≤–∏—Å–æ–≤ (STT, LLM, TTS)
4. End-to-end —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã
"""

import asyncio
import json
import logging
import sys
import time
from datetime import datetime
from pathlib import Path
from typing import Dict, Any, Optional

# Add project root to path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))


class RealCallTester:
    """–¢–µ—Å—Ç–µ—Ä –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤."""
    
    def __init__(self):
        self.logger = self._setup_logging()
        self.test_results = {
            "timestamp": datetime.now().isoformat(),
            "test_type": "real_call",
            "results": {}
        }
    
    def _setup_logging(self) -> logging.Logger:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è."""
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(levelname)s - %(message)s'
        )
        return logging.getLogger(__name__)
    
    async def check_system_readiness(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã –∫ –ø—Ä–∏–µ–º—É –∑–≤–æ–Ω–∫–æ–≤."""
        self.logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã...")
        
        try:
            # 1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å health endpoint
            import requests
            
            response = requests.get("http://localhost:8000/health", timeout=10)
            if response.status_code != 200:
                self.logger.error(f"Health endpoint –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
                return False
            
            health_data = response.json()
            status = health_data.get("status")
            health_percentage = health_data.get("health_percentage", 0)
            
            self.logger.info(f"–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã: {status} ({health_percentage:.1f}%)")
            
            if status not in ["healthy", "degraded"] or health_percentage < 75:
                self.logger.error("–°–∏—Å—Ç–µ–º–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞ –∫ –ø—Ä–∏–µ–º—É –∑–≤–æ–Ω–∫–æ–≤")
                return False
            
            # 2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å AI —Å–µ—Ä–≤–∏—Å—ã
            checks = health_data.get("checks", {})
            ai_services = ["deepgram", "openai", "cartesia"]
            
            for service in ai_services:
                service_status = checks.get(service, "unknown")
                if service_status != "ok":
                    self.logger.error(f"AI —Å–µ—Ä–≤–∏—Å {service} –Ω–µ –≥–æ—Ç–æ–≤: {service_status}")
                    return False
                self.logger.info(f"‚úÖ {service}: {service_status}")
            
            # 3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å LiveKit webhook endpoint
            try:
                webhook_response = requests.get("http://localhost:8000/webhooks/health", timeout=5)
                if webhook_response.status_code == 200:
                    self.logger.info("‚úÖ LiveKit webhook endpoint –¥–æ—Å—Ç—É–ø–µ–Ω")
                else:
                    self.logger.warning("‚ö†Ô∏è  LiveKit webhook endpoint –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            except Exception as e:
                self.logger.warning(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å webhook endpoint: {e}")
            
            self.logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø—Ä–∏–µ–º—É –∑–≤–æ–Ω–∫–æ–≤")
            return True
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã: {e}")
            return False
    
    def display_call_instructions(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–≤–æ–Ω–∫–∞."""
        print("\n" + "=" * 80)
        print("üìû –ò–ù–°–¢–†–£–ö–¶–ò–ò –î–õ–Ø –¢–ï–°–¢–û–í–û–ì–û –ó–í–û–ù–ö–ê")
        print("=" * 80)
        print()
        print("1. üì± –ü–æ–∑–≤–æ–Ω–∏—Ç–µ –Ω–∞ –Ω–æ–º–µ—Ä: +7 958 751 40 11")
        print("2. üé§ –î–æ–∂–¥–∏—Ç–µ—Å—å –æ—Ç–≤–µ—Ç–∞ —Å–∏—Å—Ç–µ–º—ã")
        print("3. üí¨ –°–∫–∞–∂–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å, –Ω–∞–ø—Ä–∏–º–µ—Ä: '–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?'")
        print("4. üëÇ –ü–æ—Å–ª—É—à–∞–π—Ç–µ –æ—Ç–≤–µ—Ç AI –∞–≥–µ–Ω—Ç–∞")
        print("5. üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–µ–ø–ª–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∏–∞–ª–æ–≥–∞")
        print("6. üìû –ó–∞–≤–µ—Ä—à–∏—Ç–µ –∑–≤–æ–Ω–æ–∫")
        print()
        print("üîç –ß–¢–û –ü–†–û–í–ï–†–Ø–ï–ú:")
        print("   ‚úì –°–∏—Å—Ç–µ–º–∞ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∑–≤–æ–Ω–æ–∫")
        print("   ‚úì –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç (Deepgram STT)")
        print("   ‚úì AI –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç—ã (OpenAI LLM)")
        print("   ‚úì –°–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç (Cartesia TTS)")
        print("   ‚úì –ö–∞—á–µ—Å—Ç–≤–æ –∑–≤—É–∫–∞ –ø—Ä–∏–µ–º–ª–µ–º–æ–µ")
        print("   ‚úì –ó–∞–¥–µ—Ä–∂–∫–∞ –æ—Ç–≤–µ—Ç–∞ < 2 —Å–µ–∫—É–Ω–¥")
        print()
        print("‚ö†Ô∏è  –í–û–ó–ú–û–ñ–ù–´–ï –ü–†–û–ë–õ–ï–ú–´:")
        print("   ‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç ‚Üí –ø—Ä–æ–≤–µ—Ä–∏—Ç—å SIP –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        print("   ‚Ä¢ –ü–ª–æ—Ö–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∑–≤—É–∫–∞ ‚Üí –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–¥–µ–∫–∏")
        print("   ‚Ä¢ –ë–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ ‚Üí –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
        print("   ‚Ä¢ –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ AI ‚Üí –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
        print()
        print("=" * 80)
    
    async def monitor_call_logs(self, duration_minutes: int = 5):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å –ª–æ–≥–∏ –≤–æ –≤—Ä–µ–º—è –∑–≤–æ–Ω–∫–∞."""
        self.logger.info(f"üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥–æ–≤ –≤ —Ç–µ—á–µ–Ω–∏–µ {duration_minutes} –º–∏–Ω—É—Ç...")
        
        import subprocess
        
        # –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥–æ–≤ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        try:
            process = subprocess.Popen(
                ["docker", "logs", "-f", "voice-ai-agent-prod"],
                stdout=subprocess.PIPE,
                stderr=subprocess.STDOUT,
                universal_newlines=True
            )
            
            start_time = time.time()
            call_detected = False
            
            print("\nüìã –õ–û–ì–ò –°–ò–°–¢–ï–ú–´ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏):")
            print("-" * 60)
            
            while time.time() - start_time < duration_minutes * 60:
                try:
                    line = process.stdout.readline()
                    if line:
                        line = line.strip()
                        print(f"[{datetime.now().strftime('%H:%M:%S')}] {line}")
                        
                        # –î–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–≤–æ–Ω–∫–æ–≤
                        if any(keyword in line.lower() for keyword in [
                            "call", "room", "participant", "audio", "transcription", "synthesis"
                        ]):
                            call_detected = True
                            print(f"üî• –ê–ö–¢–ò–í–ù–û–°–¢–¨ –ó–í–û–ù–ö–ê –û–ë–ù–ê–†–£–ñ–ï–ù–ê: {line}")
                    
                    await asyncio.sleep(0.1)
                    
                except KeyboardInterrupt:
                    break
            
            process.terminate()
            
            if call_detected:
                self.logger.info("‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–≤–æ–Ω–∫–æ–≤ –≤ –ª–æ–≥–∞—Ö")
            else:
                self.logger.warning("‚ö†Ô∏è  –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–≤–æ–Ω–∫–æ–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞")
            
            return call_detected
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ª–æ–≥–æ–≤: {e}")
            return False
    
    async def check_call_metrics(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –ø–æ—Å–ª–µ –∑–≤–æ–Ω–∫–∞."""
        self.logger.info("üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç—Ä–∏–∫ —Å–∏—Å—Ç–µ–º—ã...")
        
        try:
            import requests
            
            # –ü–æ–ª—É—á–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏
            metrics_response = requests.get("http://localhost:9090/metrics", timeout=10)
            if metrics_response.status_code == 200:
                metrics_text = metrics_response.text
                
                # –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥ –º–µ—Ç—Ä–∏–∫
                call_metrics = {}
                for line in metrics_text.split('\n'):
                    if 'call' in line.lower() and not line.startswith('#'):
                        call_metrics[line.split()[0]] = line.split()[1] if len(line.split()) > 1 else "N/A"
                
                self.logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(call_metrics)} –º–µ—Ç—Ä–∏–∫ –∑–≤–æ–Ω–∫–æ–≤")
                return call_metrics
            else:
                self.logger.warning("–ú–µ—Ç—Ä–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
                return {}
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫: {e}")
            return {}
    
    def generate_test_report(self, call_detected: bool, metrics: Dict[str, Any]):
        """–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏."""
        print("\n" + "=" * 80)
        print("üìã –û–¢–ß–ï–¢ –û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò –†–ï–ê–õ–¨–ù–û–ì–û –ó–í–û–ù–ö–ê")
        print("=" * 80)
        print(f"–í—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"–ù–æ–º–µ—Ä –¥–ª—è –∑–≤–æ–Ω–∫–æ–≤: +7 958 751 40 11")
        print()
        
        print("üîç –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–û–í–ï–†–ö–ò:")
        print(f"   –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞: ‚úÖ")
        print(f"   –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–≤–æ–Ω–∫–æ–≤: {'‚úÖ' if call_detected else '‚ùå'}")
        print(f"   –ú–µ—Ç—Ä–∏–∫–∏ —Å–æ–±—Ä–∞–Ω—ã: {'‚úÖ' if metrics else '‚ùå'}")
        print()
        
        if metrics:
            print("üìä –ú–ï–¢–†–ò–ö–ò –ó–í–û–ù–ö–û–í:")
            for metric, value in list(metrics.items())[:10]:  # –ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—ã–µ 10
                print(f"   {metric}: {value}")
            if len(metrics) > 10:
                print(f"   ... –∏ –µ—â–µ {len(metrics) - 10} –º–µ—Ç—Ä–∏–∫")
        
        print()
        print("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        if call_detected:
            print("   ‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–≤–æ–Ω–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            print("   ‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç")
            print("   ‚úÖ –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ")
        else:
            print("   ‚ö†Ô∏è  –ó–≤–æ–Ω–∫–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ:")
            print("      ‚Ä¢ SIP –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Novofon")
            print("      ‚Ä¢ LiveKit –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é")
            print("      ‚Ä¢ –°–µ—Ç–µ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        
        print()
        print("=" * 80)
    
    async def run_interactive_test(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ."""
        print("üéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –†–ï–ê–õ–¨–ù–û–ì–û –ó–í–û–ù–ö–ê")
        print("=" * 50)
        
        # 1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã
        if not await self.check_system_readiness():
            print("‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é")
            return False
        
        # 2. –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        self.display_call_instructions()
        
        # 3. –ñ–¥–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        input("\nüé§ –ù–∞–∂–º–∏—Ç–µ Enter –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥...")
        
        # 4. –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        print("\nüîç –ù–∞—á–∏–Ω–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥. –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –∑–≤–æ–Ω–∏—Ç—å!")
        call_detected = await self.monitor_call_logs(duration_minutes=5)
        
        # 5. –°–æ–±—Ä–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏
        metrics = await self.check_call_metrics()
        
        # 6. –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç
        self.generate_test_report(call_detected, metrics)
        
        return call_detected


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    import argparse
    
    parser = argparse.ArgumentParser(description="–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∑–≤–æ–Ω–∫–∞")
    parser.add_argument("--monitor-only", action="store_true", help="–¢–æ–ª—å–∫–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥–æ–≤")
    parser.add_argument("--duration", type=int, default=5, help="–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö")
    
    args = parser.parse_args()
    
    tester = RealCallTester()
    
    if args.monitor_only:
        # –¢–æ–ª—å–∫–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        await tester.monitor_call_logs(args.duration)
    else:
        # –ü–æ–ª–Ω–æ–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        success = await tester.run_interactive_test()
        sys.exit(0 if success else 1)


if __name__ == "__main__":
    asyncio.run(main())